### YamlMime:ManagedReference
items:
- uid: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions
  commentId: T:IdeaStatiCa.BimApiLink.Utils.DoubleExtensions
  id: DoubleExtensions
  parent: IdeaStatiCa.BimApiLink.Utils
  children:
  - IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.DegreesToRadians(System.Double)
  - IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.InchesToMeters(System.Double)
  - IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.IsEqual(System.Double,System.Double,System.Double)
  - IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.IsGreater(System.Double,System.Double,System.Double)
  - IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.IsGreaterOrEqual(System.Double,System.Double,System.Double)
  - IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.IsLesser(System.Double,System.Double,System.Double)
  - IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.IsLesserOrEqual(System.Double,System.Double,System.Double)
  - IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.IsZero(System.Double,System.Double)
  - IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.KipsToKgPerCm2(System.Double)
  - IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.KipsToMPascal(System.Double)
  - IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.KipsToNewtons(System.Double)
  - IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.MetersToMilimeters(System.Double)
  - IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.MilimetersToMeters(System.Double)
  - IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.PrecentageToRadians(System.Double)
  - IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.RadiansToDegrees(System.Double)
  langs:
  - csharp
  - vb
  name: DoubleExtensions
  nameWithType: DoubleExtensions
  fullName: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions
  type: Class
  source:
    remote:
      path: src/IdeaStatica.BimApiLink/Utils/DoubleExtensions.cs
      branch: add_wiki_content_to_docfx
      repo: https://github.com/idea-statica/ideastatica-public.git
    id: DoubleExtensions
    path: ../src/IdeaStatica.BimApiLink/Utils/DoubleExtensions.cs
    startLine: 5
  assemblies:
  - IdeaStatiCa.BimApiLink
  namespace: IdeaStatiCa.BimApiLink.Utils
  syntax:
    content: public static class DoubleExtensions
    content.vb: Public Module DoubleExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.PrecentageToRadians(System.Double)
  commentId: M:IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.PrecentageToRadians(System.Double)
  id: PrecentageToRadians(System.Double)
  isExtensionMethod: true
  parent: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions
  langs:
  - csharp
  - vb
  name: PrecentageToRadians(double)
  nameWithType: DoubleExtensions.PrecentageToRadians(double)
  fullName: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.PrecentageToRadians(double)
  type: Method
  source:
    remote:
      path: src/IdeaStatica.BimApiLink/Utils/DoubleExtensions.cs
      branch: add_wiki_content_to_docfx
      repo: https://github.com/idea-statica/ideastatica-public.git
    id: PrecentageToRadians
    path: ../src/IdeaStatica.BimApiLink/Utils/DoubleExtensions.cs
    startLine: 7
  assemblies:
  - IdeaStatiCa.BimApiLink
  namespace: IdeaStatiCa.BimApiLink.Utils
  syntax:
    content: public static double PrecentageToRadians(this double val)
    parameters:
    - id: val
      type: System.Double
    return:
      type: System.Double
    content.vb: Public Shared Function PrecentageToRadians(val As Double) As Double
  overload: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.PrecentageToRadians*
  nameWithType.vb: DoubleExtensions.PrecentageToRadians(Double)
  fullName.vb: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.PrecentageToRadians(Double)
  name.vb: PrecentageToRadians(Double)
- uid: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.MetersToMilimeters(System.Double)
  commentId: M:IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.MetersToMilimeters(System.Double)
  id: MetersToMilimeters(System.Double)
  isExtensionMethod: true
  parent: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions
  langs:
  - csharp
  - vb
  name: MetersToMilimeters(double)
  nameWithType: DoubleExtensions.MetersToMilimeters(double)
  fullName: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.MetersToMilimeters(double)
  type: Method
  source:
    remote:
      path: src/IdeaStatica.BimApiLink/Utils/DoubleExtensions.cs
      branch: add_wiki_content_to_docfx
      repo: https://github.com/idea-statica/ideastatica-public.git
    id: MetersToMilimeters
    path: ../src/IdeaStatica.BimApiLink/Utils/DoubleExtensions.cs
    startLine: 13
  assemblies:
  - IdeaStatiCa.BimApiLink
  namespace: IdeaStatiCa.BimApiLink.Utils
  syntax:
    content: public static double MetersToMilimeters(this double val)
    parameters:
    - id: val
      type: System.Double
    return:
      type: System.Double
    content.vb: Public Shared Function MetersToMilimeters(val As Double) As Double
  overload: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.MetersToMilimeters*
  nameWithType.vb: DoubleExtensions.MetersToMilimeters(Double)
  fullName.vb: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.MetersToMilimeters(Double)
  name.vb: MetersToMilimeters(Double)
- uid: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.MilimetersToMeters(System.Double)
  commentId: M:IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.MilimetersToMeters(System.Double)
  id: MilimetersToMeters(System.Double)
  isExtensionMethod: true
  parent: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions
  langs:
  - csharp
  - vb
  name: MilimetersToMeters(double)
  nameWithType: DoubleExtensions.MilimetersToMeters(double)
  fullName: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.MilimetersToMeters(double)
  type: Method
  source:
    remote:
      path: src/IdeaStatica.BimApiLink/Utils/DoubleExtensions.cs
      branch: add_wiki_content_to_docfx
      repo: https://github.com/idea-statica/ideastatica-public.git
    id: MilimetersToMeters
    path: ../src/IdeaStatica.BimApiLink/Utils/DoubleExtensions.cs
    startLine: 19
  assemblies:
  - IdeaStatiCa.BimApiLink
  namespace: IdeaStatiCa.BimApiLink.Utils
  syntax:
    content: public static double MilimetersToMeters(this double val)
    parameters:
    - id: val
      type: System.Double
    return:
      type: System.Double
    content.vb: Public Shared Function MilimetersToMeters(val As Double) As Double
  overload: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.MilimetersToMeters*
  nameWithType.vb: DoubleExtensions.MilimetersToMeters(Double)
  fullName.vb: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.MilimetersToMeters(Double)
  name.vb: MilimetersToMeters(Double)
- uid: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.InchesToMeters(System.Double)
  commentId: M:IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.InchesToMeters(System.Double)
  id: InchesToMeters(System.Double)
  isExtensionMethod: true
  parent: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions
  langs:
  - csharp
  - vb
  name: InchesToMeters(double)
  nameWithType: DoubleExtensions.InchesToMeters(double)
  fullName: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.InchesToMeters(double)
  type: Method
  source:
    remote:
      path: src/IdeaStatica.BimApiLink/Utils/DoubleExtensions.cs
      branch: add_wiki_content_to_docfx
      repo: https://github.com/idea-statica/ideastatica-public.git
    id: InchesToMeters
    path: ../src/IdeaStatica.BimApiLink/Utils/DoubleExtensions.cs
    startLine: 25
  assemblies:
  - IdeaStatiCa.BimApiLink
  namespace: IdeaStatiCa.BimApiLink.Utils
  syntax:
    content: public static double InchesToMeters(this double val)
    parameters:
    - id: val
      type: System.Double
    return:
      type: System.Double
    content.vb: Public Shared Function InchesToMeters(val As Double) As Double
  overload: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.InchesToMeters*
  nameWithType.vb: DoubleExtensions.InchesToMeters(Double)
  fullName.vb: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.InchesToMeters(Double)
  name.vb: InchesToMeters(Double)
- uid: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.KipsToNewtons(System.Double)
  commentId: M:IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.KipsToNewtons(System.Double)
  id: KipsToNewtons(System.Double)
  isExtensionMethod: true
  parent: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions
  langs:
  - csharp
  - vb
  name: KipsToNewtons(double)
  nameWithType: DoubleExtensions.KipsToNewtons(double)
  fullName: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.KipsToNewtons(double)
  type: Method
  source:
    remote:
      path: src/IdeaStatica.BimApiLink/Utils/DoubleExtensions.cs
      branch: add_wiki_content_to_docfx
      repo: https://github.com/idea-statica/ideastatica-public.git
    id: KipsToNewtons
    path: ../src/IdeaStatica.BimApiLink/Utils/DoubleExtensions.cs
    startLine: 31
  assemblies:
  - IdeaStatiCa.BimApiLink
  namespace: IdeaStatiCa.BimApiLink.Utils
  syntax:
    content: public static double KipsToNewtons(this double val)
    parameters:
    - id: val
      type: System.Double
    return:
      type: System.Double
    content.vb: Public Shared Function KipsToNewtons(val As Double) As Double
  overload: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.KipsToNewtons*
  nameWithType.vb: DoubleExtensions.KipsToNewtons(Double)
  fullName.vb: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.KipsToNewtons(Double)
  name.vb: KipsToNewtons(Double)
- uid: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.KipsToMPascal(System.Double)
  commentId: M:IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.KipsToMPascal(System.Double)
  id: KipsToMPascal(System.Double)
  isExtensionMethod: true
  parent: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions
  langs:
  - csharp
  - vb
  name: KipsToMPascal(double)
  nameWithType: DoubleExtensions.KipsToMPascal(double)
  fullName: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.KipsToMPascal(double)
  type: Method
  source:
    remote:
      path: src/IdeaStatica.BimApiLink/Utils/DoubleExtensions.cs
      branch: add_wiki_content_to_docfx
      repo: https://github.com/idea-statica/ideastatica-public.git
    id: KipsToMPascal
    path: ../src/IdeaStatica.BimApiLink/Utils/DoubleExtensions.cs
    startLine: 37
  assemblies:
  - IdeaStatiCa.BimApiLink
  namespace: IdeaStatiCa.BimApiLink.Utils
  syntax:
    content: public static double KipsToMPascal(this double val)
    parameters:
    - id: val
      type: System.Double
    return:
      type: System.Double
    content.vb: Public Shared Function KipsToMPascal(val As Double) As Double
  overload: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.KipsToMPascal*
  nameWithType.vb: DoubleExtensions.KipsToMPascal(Double)
  fullName.vb: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.KipsToMPascal(Double)
  name.vb: KipsToMPascal(Double)
- uid: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.KipsToKgPerCm2(System.Double)
  commentId: M:IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.KipsToKgPerCm2(System.Double)
  id: KipsToKgPerCm2(System.Double)
  isExtensionMethod: true
  parent: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions
  langs:
  - csharp
  - vb
  name: KipsToKgPerCm2(double)
  nameWithType: DoubleExtensions.KipsToKgPerCm2(double)
  fullName: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.KipsToKgPerCm2(double)
  type: Method
  source:
    remote:
      path: src/IdeaStatica.BimApiLink/Utils/DoubleExtensions.cs
      branch: add_wiki_content_to_docfx
      repo: https://github.com/idea-statica/ideastatica-public.git
    id: KipsToKgPerCm2
    path: ../src/IdeaStatica.BimApiLink/Utils/DoubleExtensions.cs
    startLine: 43
  assemblies:
  - IdeaStatiCa.BimApiLink
  namespace: IdeaStatiCa.BimApiLink.Utils
  syntax:
    content: public static double KipsToKgPerCm2(this double val)
    parameters:
    - id: val
      type: System.Double
    return:
      type: System.Double
    content.vb: Public Shared Function KipsToKgPerCm2(val As Double) As Double
  overload: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.KipsToKgPerCm2*
  nameWithType.vb: DoubleExtensions.KipsToKgPerCm2(Double)
  fullName.vb: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.KipsToKgPerCm2(Double)
  name.vb: KipsToKgPerCm2(Double)
- uid: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.DegreesToRadians(System.Double)
  commentId: M:IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.DegreesToRadians(System.Double)
  id: DegreesToRadians(System.Double)
  isExtensionMethod: true
  parent: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions
  langs:
  - csharp
  - vb
  name: DegreesToRadians(double)
  nameWithType: DoubleExtensions.DegreesToRadians(double)
  fullName: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.DegreesToRadians(double)
  type: Method
  source:
    remote:
      path: src/IdeaStatica.BimApiLink/Utils/DoubleExtensions.cs
      branch: add_wiki_content_to_docfx
      repo: https://github.com/idea-statica/ideastatica-public.git
    id: DegreesToRadians
    path: ../src/IdeaStatica.BimApiLink/Utils/DoubleExtensions.cs
    startLine: 49
  assemblies:
  - IdeaStatiCa.BimApiLink
  namespace: IdeaStatiCa.BimApiLink.Utils
  syntax:
    content: public static double DegreesToRadians(this double val)
    parameters:
    - id: val
      type: System.Double
    return:
      type: System.Double
    content.vb: Public Shared Function DegreesToRadians(val As Double) As Double
  overload: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.DegreesToRadians*
  nameWithType.vb: DoubleExtensions.DegreesToRadians(Double)
  fullName.vb: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.DegreesToRadians(Double)
  name.vb: DegreesToRadians(Double)
- uid: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.RadiansToDegrees(System.Double)
  commentId: M:IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.RadiansToDegrees(System.Double)
  id: RadiansToDegrees(System.Double)
  isExtensionMethod: true
  parent: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions
  langs:
  - csharp
  - vb
  name: RadiansToDegrees(double)
  nameWithType: DoubleExtensions.RadiansToDegrees(double)
  fullName: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.RadiansToDegrees(double)
  type: Method
  source:
    remote:
      path: src/IdeaStatica.BimApiLink/Utils/DoubleExtensions.cs
      branch: add_wiki_content_to_docfx
      repo: https://github.com/idea-statica/ideastatica-public.git
    id: RadiansToDegrees
    path: ../src/IdeaStatica.BimApiLink/Utils/DoubleExtensions.cs
    startLine: 55
  assemblies:
  - IdeaStatiCa.BimApiLink
  namespace: IdeaStatiCa.BimApiLink.Utils
  syntax:
    content: public static double RadiansToDegrees(this double val)
    parameters:
    - id: val
      type: System.Double
    return:
      type: System.Double
    content.vb: Public Shared Function RadiansToDegrees(val As Double) As Double
  overload: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.RadiansToDegrees*
  nameWithType.vb: DoubleExtensions.RadiansToDegrees(Double)
  fullName.vb: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.RadiansToDegrees(Double)
  name.vb: RadiansToDegrees(Double)
- uid: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.IsGreater(System.Double,System.Double,System.Double)
  commentId: M:IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.IsGreater(System.Double,System.Double,System.Double)
  id: IsGreater(System.Double,System.Double,System.Double)
  isExtensionMethod: true
  parent: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions
  langs:
  - csharp
  - vb
  name: IsGreater(double, double, double)
  nameWithType: DoubleExtensions.IsGreater(double, double, double)
  fullName: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.IsGreater(double, double, double)
  type: Method
  source:
    remote:
      path: src/IdeaStatica.BimApiLink/Utils/DoubleExtensions.cs
      branch: add_wiki_content_to_docfx
      repo: https://github.com/idea-statica/ideastatica-public.git
    id: IsGreater
    path: ../src/IdeaStatica.BimApiLink/Utils/DoubleExtensions.cs
    startLine: 68
  assemblies:
  - IdeaStatiCa.BimApiLink
  namespace: IdeaStatiCa.BimApiLink.Utils
  summary: IsGreater - Determines whether the leftValue is greater than rightValue
  example: []
  syntax:
    content: public static bool IsGreater(this double leftValue, double rightValue, double tolerance = 1E-10)
    parameters:
    - id: leftValue
      type: System.Double
      description: Value on LHS of operator
    - id: rightValue
      type: System.Double
      description: Value on RHS of operator
    - id: tolerance
      type: System.Double
      description: Tolerance level for comparison
    return:
      type: System.Boolean
      description: Return true if the given leftValue is greater than rightValue. Return false otherwise
    content.vb: Public Shared Function IsGreater(leftValue As Double, rightValue As Double, tolerance As Double = 1E-10) As Boolean
  overload: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.IsGreater*
  nameWithType.vb: DoubleExtensions.IsGreater(Double, Double, Double)
  fullName.vb: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.IsGreater(Double, Double, Double)
  name.vb: IsGreater(Double, Double, Double)
- uid: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.IsGreaterOrEqual(System.Double,System.Double,System.Double)
  commentId: M:IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.IsGreaterOrEqual(System.Double,System.Double,System.Double)
  id: IsGreaterOrEqual(System.Double,System.Double,System.Double)
  isExtensionMethod: true
  parent: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions
  langs:
  - csharp
  - vb
  name: IsGreaterOrEqual(double, double, double)
  nameWithType: DoubleExtensions.IsGreaterOrEqual(double, double, double)
  fullName: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.IsGreaterOrEqual(double, double, double)
  type: Method
  source:
    remote:
      path: src/IdeaStatica.BimApiLink/Utils/DoubleExtensions.cs
      branch: add_wiki_content_to_docfx
      repo: https://github.com/idea-statica/ideastatica-public.git
    id: IsGreaterOrEqual
    path: ../src/IdeaStatica.BimApiLink/Utils/DoubleExtensions.cs
    startLine: 81
  assemblies:
  - IdeaStatiCa.BimApiLink
  namespace: IdeaStatiCa.BimApiLink.Utils
  summary: IsGreaterOrEqual - Determines whether the leftValue is greater or equal to rightValue
  example: []
  syntax:
    content: public static bool IsGreaterOrEqual(this double leftValue, double rightValue, double tolerance = 1E-10)
    parameters:
    - id: leftValue
      type: System.Double
      description: Value on LHS of operator
    - id: rightValue
      type: System.Double
      description: Value on RHS of operator
    - id: tolerance
      type: System.Double
      description: Tolerance level for comparison
    return:
      type: System.Boolean
      description: Return true if leftValue is greater than or equal to rightValue. Return false otherwise
    content.vb: Public Shared Function IsGreaterOrEqual(leftValue As Double, rightValue As Double, tolerance As Double = 1E-10) As Boolean
  overload: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.IsGreaterOrEqual*
  nameWithType.vb: DoubleExtensions.IsGreaterOrEqual(Double, Double, Double)
  fullName.vb: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.IsGreaterOrEqual(Double, Double, Double)
  name.vb: IsGreaterOrEqual(Double, Double, Double)
- uid: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.IsLesser(System.Double,System.Double,System.Double)
  commentId: M:IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.IsLesser(System.Double,System.Double,System.Double)
  id: IsLesser(System.Double,System.Double,System.Double)
  isExtensionMethod: true
  parent: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions
  langs:
  - csharp
  - vb
  name: IsLesser(double, double, double)
  nameWithType: DoubleExtensions.IsLesser(double, double, double)
  fullName: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.IsLesser(double, double, double)
  type: Method
  source:
    remote:
      path: src/IdeaStatica.BimApiLink/Utils/DoubleExtensions.cs
      branch: add_wiki_content_to_docfx
      repo: https://github.com/idea-statica/ideastatica-public.git
    id: IsLesser
    path: ../src/IdeaStatica.BimApiLink/Utils/DoubleExtensions.cs
    startLine: 100
  assemblies:
  - IdeaStatiCa.BimApiLink
  namespace: IdeaStatiCa.BimApiLink.Utils
  summary: IsLesser - Determines whether leftValue is lesser than rightValue
  example: []
  syntax:
    content: public static bool IsLesser(this double leftValue, double rightValue, double tolerance = 1E-10)
    parameters:
    - id: leftValue
      type: System.Double
      description: Value on LHS of operator
    - id: rightValue
      type: System.Double
      description: Value on RHS of operator
    - id: tolerance
      type: System.Double
      description: Tolerance level for comparison
    return:
      type: System.Boolean
      description: Return true if the given leftValue is lesser than rightValue. Return false otherwise
    content.vb: Public Shared Function IsLesser(leftValue As Double, rightValue As Double, tolerance As Double = 1E-10) As Boolean
  overload: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.IsLesser*
  nameWithType.vb: DoubleExtensions.IsLesser(Double, Double, Double)
  fullName.vb: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.IsLesser(Double, Double, Double)
  name.vb: IsLesser(Double, Double, Double)
- uid: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.IsLesserOrEqual(System.Double,System.Double,System.Double)
  commentId: M:IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.IsLesserOrEqual(System.Double,System.Double,System.Double)
  id: IsLesserOrEqual(System.Double,System.Double,System.Double)
  isExtensionMethod: true
  parent: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions
  langs:
  - csharp
  - vb
  name: IsLesserOrEqual(double, double, double)
  nameWithType: DoubleExtensions.IsLesserOrEqual(double, double, double)
  fullName: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.IsLesserOrEqual(double, double, double)
  type: Method
  source:
    remote:
      path: src/IdeaStatica.BimApiLink/Utils/DoubleExtensions.cs
      branch: add_wiki_content_to_docfx
      repo: https://github.com/idea-statica/ideastatica-public.git
    id: IsLesserOrEqual
    path: ../src/IdeaStatica.BimApiLink/Utils/DoubleExtensions.cs
    startLine: 113
  assemblies:
  - IdeaStatiCa.BimApiLink
  namespace: IdeaStatiCa.BimApiLink.Utils
  summary: IsLesserOrEqual - Determines whether the leftValue is lesser or equal to rightValue
  example: []
  syntax:
    content: public static bool IsLesserOrEqual(this double leftValue, double rightValue, double tolerance = 1E-10)
    parameters:
    - id: leftValue
      type: System.Double
      description: Value on LHS of operator
    - id: rightValue
      type: System.Double
      description: Value on RHS of operator
    - id: tolerance
      type: System.Double
      description: Tolerance level for comparison
    return:
      type: System.Boolean
      description: Return true if the given leftValue is lesser than or equal to rightValue. Return false otherwise
    content.vb: Public Shared Function IsLesserOrEqual(leftValue As Double, rightValue As Double, tolerance As Double = 1E-10) As Boolean
  overload: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.IsLesserOrEqual*
  nameWithType.vb: DoubleExtensions.IsLesserOrEqual(Double, Double, Double)
  fullName.vb: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.IsLesserOrEqual(Double, Double, Double)
  name.vb: IsLesserOrEqual(Double, Double, Double)
- uid: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.IsZero(System.Double,System.Double)
  commentId: M:IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.IsZero(System.Double,System.Double)
  id: IsZero(System.Double,System.Double)
  isExtensionMethod: true
  parent: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions
  langs:
  - csharp
  - vb
  name: IsZero(double, double)
  nameWithType: DoubleExtensions.IsZero(double, double)
  fullName: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.IsZero(double, double)
  type: Method
  source:
    remote:
      path: src/IdeaStatica.BimApiLink/Utils/DoubleExtensions.cs
      branch: add_wiki_content_to_docfx
      repo: https://github.com/idea-statica/ideastatica-public.git
    id: IsZero
    path: ../src/IdeaStatica.BimApiLink/Utils/DoubleExtensions.cs
    startLine: 131
  assemblies:
  - IdeaStatiCa.BimApiLink
  namespace: IdeaStatiCa.BimApiLink.Utils
  summary: Checks, if value is zero with specified tolerance.
  example: []
  syntax:
    content: public static bool IsZero(this double value, double tolerance = 1E-09)
    parameters:
    - id: value
      type: System.Double
      description: The value for check.
    - id: tolerance
      type: System.Double
      description: The precision of check.
    return:
      type: System.Boolean
      description: True, if value is zero, false otherwise.
    content.vb: Public Shared Function IsZero(value As Double, tolerance As Double = 1E-09) As Boolean
  overload: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.IsZero*
  nameWithType.vb: DoubleExtensions.IsZero(Double, Double)
  fullName.vb: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.IsZero(Double, Double)
  name.vb: IsZero(Double, Double)
- uid: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.IsEqual(System.Double,System.Double,System.Double)
  commentId: M:IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.IsEqual(System.Double,System.Double,System.Double)
  id: IsEqual(System.Double,System.Double,System.Double)
  isExtensionMethod: true
  parent: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions
  langs:
  - csharp
  - vb
  name: IsEqual(double, double, double)
  nameWithType: DoubleExtensions.IsEqual(double, double, double)
  fullName: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.IsEqual(double, double, double)
  type: Method
  source:
    remote:
      path: src/IdeaStatica.BimApiLink/Utils/DoubleExtensions.cs
      branch: add_wiki_content_to_docfx
      repo: https://github.com/idea-statica/ideastatica-public.git
    id: IsEqual
    path: ../src/IdeaStatica.BimApiLink/Utils/DoubleExtensions.cs
    startLine: 143
  assemblies:
  - IdeaStatiCa.BimApiLink
  namespace: IdeaStatiCa.BimApiLink.Utils
  summary: IsEqual - Determines whether leftValue and rightValue are equal.
  example: []
  syntax:
    content: public static bool IsEqual(this double leftValue, double rightValue, double tolerance = 1E-10)
    parameters:
    - id: leftValue
      type: System.Double
      description: Value on LHS of operator
    - id: rightValue
      type: System.Double
      description: Value on RHS of operator
    - id: tolerance
      type: System.Double
      description: Tolerance level for comparison
    return:
      type: System.Boolean
      description: Return true if leftValue and rightValue are equal. Return false otherwise
    content.vb: Public Shared Function IsEqual(leftValue As Double, rightValue As Double, tolerance As Double = 1E-10) As Boolean
  overload: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.IsEqual*
  nameWithType.vb: DoubleExtensions.IsEqual(Double, Double, Double)
  fullName.vb: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.IsEqual(Double, Double, Double)
  name.vb: IsEqual(Double, Double, Double)
references:
- uid: IdeaStatiCa.BimApiLink.Utils
  commentId: N:IdeaStatiCa.BimApiLink.Utils
  href: IdeaStatiCa.html
  name: IdeaStatiCa.BimApiLink.Utils
  nameWithType: IdeaStatiCa.BimApiLink.Utils
  fullName: IdeaStatiCa.BimApiLink.Utils
  spec.csharp:
  - uid: IdeaStatiCa
    name: IdeaStatiCa
    href: IdeaStatiCa.html
  - name: .
  - uid: IdeaStatiCa.BimApiLink
    name: BimApiLink
    href: IdeaStatiCa.BimApiLink.html
  - name: .
  - uid: IdeaStatiCa.BimApiLink.Utils
    name: Utils
    href: IdeaStatiCa.BimApiLink.Utils.html
  spec.vb:
  - uid: IdeaStatiCa
    name: IdeaStatiCa
    href: IdeaStatiCa.html
  - name: .
  - uid: IdeaStatiCa.BimApiLink
    name: BimApiLink
    href: IdeaStatiCa.BimApiLink.html
  - name: .
  - uid: IdeaStatiCa.BimApiLink.Utils
    name: Utils
    href: IdeaStatiCa.BimApiLink.Utils.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.PrecentageToRadians*
  commentId: Overload:IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.PrecentageToRadians
  href: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.html#IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.PrecentageToRadians(System.Double)
  name: PrecentageToRadians
  nameWithType: DoubleExtensions.PrecentageToRadians
  fullName: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.PrecentageToRadians
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.double
  name: double
  nameWithType: double
  fullName: double
  nameWithType.vb: Double
  fullName.vb: Double
  name.vb: Double
- uid: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.MetersToMilimeters*
  commentId: Overload:IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.MetersToMilimeters
  href: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.html#IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.MetersToMilimeters(System.Double)
  name: MetersToMilimeters
  nameWithType: DoubleExtensions.MetersToMilimeters
  fullName: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.MetersToMilimeters
- uid: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.MilimetersToMeters*
  commentId: Overload:IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.MilimetersToMeters
  href: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.html#IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.MilimetersToMeters(System.Double)
  name: MilimetersToMeters
  nameWithType: DoubleExtensions.MilimetersToMeters
  fullName: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.MilimetersToMeters
- uid: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.InchesToMeters*
  commentId: Overload:IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.InchesToMeters
  href: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.html#IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.InchesToMeters(System.Double)
  name: InchesToMeters
  nameWithType: DoubleExtensions.InchesToMeters
  fullName: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.InchesToMeters
- uid: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.KipsToNewtons*
  commentId: Overload:IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.KipsToNewtons
  href: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.html#IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.KipsToNewtons(System.Double)
  name: KipsToNewtons
  nameWithType: DoubleExtensions.KipsToNewtons
  fullName: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.KipsToNewtons
- uid: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.KipsToMPascal*
  commentId: Overload:IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.KipsToMPascal
  href: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.html#IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.KipsToMPascal(System.Double)
  name: KipsToMPascal
  nameWithType: DoubleExtensions.KipsToMPascal
  fullName: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.KipsToMPascal
- uid: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.KipsToKgPerCm2*
  commentId: Overload:IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.KipsToKgPerCm2
  href: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.html#IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.KipsToKgPerCm2(System.Double)
  name: KipsToKgPerCm2
  nameWithType: DoubleExtensions.KipsToKgPerCm2
  fullName: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.KipsToKgPerCm2
- uid: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.DegreesToRadians*
  commentId: Overload:IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.DegreesToRadians
  href: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.html#IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.DegreesToRadians(System.Double)
  name: DegreesToRadians
  nameWithType: DoubleExtensions.DegreesToRadians
  fullName: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.DegreesToRadians
- uid: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.RadiansToDegrees*
  commentId: Overload:IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.RadiansToDegrees
  href: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.html#IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.RadiansToDegrees(System.Double)
  name: RadiansToDegrees
  nameWithType: DoubleExtensions.RadiansToDegrees
  fullName: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.RadiansToDegrees
- uid: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.IsGreater*
  commentId: Overload:IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.IsGreater
  href: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.html#IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.IsGreater(System.Double,System.Double,System.Double)
  name: IsGreater
  nameWithType: DoubleExtensions.IsGreater
  fullName: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.IsGreater
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.IsGreaterOrEqual*
  commentId: Overload:IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.IsGreaterOrEqual
  href: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.html#IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.IsGreaterOrEqual(System.Double,System.Double,System.Double)
  name: IsGreaterOrEqual
  nameWithType: DoubleExtensions.IsGreaterOrEqual
  fullName: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.IsGreaterOrEqual
- uid: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.IsLesser*
  commentId: Overload:IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.IsLesser
  href: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.html#IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.IsLesser(System.Double,System.Double,System.Double)
  name: IsLesser
  nameWithType: DoubleExtensions.IsLesser
  fullName: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.IsLesser
- uid: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.IsLesserOrEqual*
  commentId: Overload:IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.IsLesserOrEqual
  href: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.html#IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.IsLesserOrEqual(System.Double,System.Double,System.Double)
  name: IsLesserOrEqual
  nameWithType: DoubleExtensions.IsLesserOrEqual
  fullName: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.IsLesserOrEqual
- uid: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.IsZero*
  commentId: Overload:IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.IsZero
  href: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.html#IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.IsZero(System.Double,System.Double)
  name: IsZero
  nameWithType: DoubleExtensions.IsZero
  fullName: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.IsZero
- uid: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.IsEqual*
  commentId: Overload:IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.IsEqual
  href: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.html#IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.IsEqual(System.Double,System.Double,System.Double)
  name: IsEqual
  nameWithType: DoubleExtensions.IsEqual
  fullName: IdeaStatiCa.BimApiLink.Utils.DoubleExtensions.IsEqual
