/*
 * RCS Rest API 1.0
 *
 * IDEA StatiCa RCS API, used for the automated design and calculation of reinforced concrete sections.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: info@ideastatica.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using IdeaRS.OpenModel;
using IdeaStatiCa.Api.RCS.Model;
using IdeaStatiCa.RcsApi.Client;
using IdeaStatiCa.RcsApi.Model;

namespace IdeaStatiCa.RcsApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICalculationApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Calculate RCS project
        /// </summary>
        /// <exception cref="IdeaStatiCa.RcsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project Id</param>
        /// <param name="rcsCalculationParameters">Calculation parameters (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;RcsSectionResultOverview&gt;</returns>
        List<RcsSectionResultOverview> Calculate(Guid projectId, RcsCalculationParameters rcsCalculationParameters = default(RcsCalculationParameters), int operationIndex = 0);

        /// <summary>
        /// Calculate RCS project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IdeaStatiCa.RcsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project Id</param>
/// <param name="rcsCalculationParameters">Calculation parameters (optional)</param>
        /// <param name="requestedType">Requested content type in the response.</param>        
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;RcsSectionResultOverview&gt;</returns>
        ApiResponse<List<RcsSectionResultOverview>> CalculateWithHttpInfo(Guid projectId, RcsCalculationParameters rcsCalculationParameters = default(RcsCalculationParameters), string requestedType = null, int operationIndex = 0);
        /// <summary>
        /// Get calculated results
        /// </summary>
        /// <exception cref="IdeaStatiCa.RcsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project Id</param>
        /// <param name="rcsResultParameters">Calculation parameters (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;RcsSectionResultDetailed&gt;</returns>
        List<RcsSectionResultDetailed> GetResults(Guid projectId, RcsResultParameters rcsResultParameters = default(RcsResultParameters), int operationIndex = 0);

        /// <summary>
        /// Get calculated results
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IdeaStatiCa.RcsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project Id</param>
/// <param name="rcsResultParameters">Calculation parameters (optional)</param>
        /// <param name="requestedType">Requested content type in the response.</param>        
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;RcsSectionResultDetailed&gt;</returns>
        ApiResponse<List<RcsSectionResultDetailed>> GetResultsWithHttpInfo(Guid projectId, RcsResultParameters rcsResultParameters = default(RcsResultParameters), string requestedType = null, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICalculationApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Calculate RCS project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IdeaStatiCa.RcsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project Id</param>
        /// <param name="rcsCalculationParameters">Calculation parameters (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;RcsSectionResultOverview&gt;</returns>
        System.Threading.Tasks.Task<List<RcsSectionResultOverview>> CalculateAsync(Guid projectId, RcsCalculationParameters rcsCalculationParameters = default(RcsCalculationParameters), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Calculate RCS project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IdeaStatiCa.RcsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project Id</param>
        /// <param name="rcsCalculationParameters">Calculation parameters (optional)</param>
        /// <param name="requestedType">Requested content type in the response.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;RcsSectionResultOverview&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<RcsSectionResultOverview>>> CalculateWithHttpInfoAsync(Guid projectId, RcsCalculationParameters rcsCalculationParameters = default(RcsCalculationParameters), string requestedType = null, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get calculated results
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IdeaStatiCa.RcsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project Id</param>
        /// <param name="rcsResultParameters">Calculation parameters (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;RcsSectionResultDetailed&gt;</returns>
        System.Threading.Tasks.Task<List<RcsSectionResultDetailed>> GetResultsAsync(Guid projectId, RcsResultParameters rcsResultParameters = default(RcsResultParameters), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get calculated results
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IdeaStatiCa.RcsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project Id</param>
        /// <param name="rcsResultParameters">Calculation parameters (optional)</param>
        /// <param name="requestedType">Requested content type in the response.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;RcsSectionResultDetailed&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<RcsSectionResultDetailed>>> GetResultsWithHttpInfoAsync(Guid projectId, RcsResultParameters rcsResultParameters = default(RcsResultParameters), string requestedType = null, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICalculationApi : ICalculationApiSync, ICalculationApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CalculationApi : ICalculationApi
    {
        private IdeaStatiCa.RcsApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CalculationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CalculationApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CalculationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CalculationApi(string basePath)
        {
            this.Configuration = IdeaStatiCa.RcsApi.Client.Configuration.MergeConfigurations(
                IdeaStatiCa.RcsApi.Client.GlobalConfiguration.Instance,
                new IdeaStatiCa.RcsApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new IdeaStatiCa.RcsApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new IdeaStatiCa.RcsApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = IdeaStatiCa.RcsApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CalculationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CalculationApi(IdeaStatiCa.RcsApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = IdeaStatiCa.RcsApi.Client.Configuration.MergeConfigurations(
                IdeaStatiCa.RcsApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new IdeaStatiCa.RcsApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new IdeaStatiCa.RcsApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = IdeaStatiCa.RcsApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CalculationApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public CalculationApi(IdeaStatiCa.RcsApi.Client.ISynchronousClient client, IdeaStatiCa.RcsApi.Client.IAsynchronousClient asyncClient, IdeaStatiCa.RcsApi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = IdeaStatiCa.RcsApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public IdeaStatiCa.RcsApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public IdeaStatiCa.RcsApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IdeaStatiCa.RcsApi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IdeaStatiCa.RcsApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Calculate RCS project 
        /// </summary>
        /// <exception cref="IdeaStatiCa.RcsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project Id</param>
        /// <param name="rcsCalculationParameters">Calculation parameters (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;RcsSectionResultOverview&gt;</returns>
        public List<RcsSectionResultOverview> Calculate(Guid projectId, RcsCalculationParameters rcsCalculationParameters = default(RcsCalculationParameters), int operationIndex = 0)
        {
            IdeaStatiCa.RcsApi.Client.ApiResponse<List<RcsSectionResultOverview>> localVarResponse = CalculateWithHttpInfo(projectId, rcsCalculationParameters);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Calculate RCS project 
        /// </summary>
        /// <exception cref="IdeaStatiCa.RcsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project Id</param>
/// <param name="rcsCalculationParameters">Calculation parameters (optional)</param>
        /// <param name="requestedType">Requested content type in the response.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;RcsSectionResultOverview&gt;</returns>
        public IdeaStatiCa.RcsApi.Client.ApiResponse<List<RcsSectionResultOverview>> CalculateWithHttpInfo(Guid projectId, RcsCalculationParameters rcsCalculationParameters = default(RcsCalculationParameters), string requestedType = null, int operationIndex = 0)
        {
            IdeaStatiCa.RcsApi.Client.RequestOptions localVarRequestOptions = new IdeaStatiCa.RcsApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = IdeaStatiCa.RcsApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            string localVarAccept = requestedType;

            if(string.IsNullOrEmpty(localVarAccept))
            {
                localVarAccept = IdeaStatiCa.RcsApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
                if (localVarAccept != null)
                {
                    localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
                }
            }

            localVarRequestOptions.PathParameters.Add("projectId", IdeaStatiCa.RcsApi.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.Data = rcsCalculationParameters;

            localVarRequestOptions.Operation = "CalculationApi.Calculate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<List<RcsSectionResultOverview>>("/api/1/projects/{projectId}/calculate", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Calculate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Calculate RCS project 
        /// </summary>
        /// <exception cref="IdeaStatiCa.RcsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project Id</param>
        /// <param name="rcsCalculationParameters">Calculation parameters (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;RcsSectionResultOverview&gt;</returns>
        public async System.Threading.Tasks.Task<List<RcsSectionResultOverview>> CalculateAsync(Guid projectId, RcsCalculationParameters rcsCalculationParameters = default(RcsCalculationParameters), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            IdeaStatiCa.RcsApi.Client.ApiResponse<List<RcsSectionResultOverview>> localVarResponse = await CalculateWithHttpInfoAsync(projectId, rcsCalculationParameters, null, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Calculate RCS project 
        /// </summary>
        /// <exception cref="IdeaStatiCa.RcsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project Id</param>
        /// <param name="rcsCalculationParameters">Calculation parameters (optional)</param>
        /// <param name="requestedType">Requested content type in the response.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;RcsSectionResultOverview&gt;)</returns>
        public async System.Threading.Tasks.Task<IdeaStatiCa.RcsApi.Client.ApiResponse<List<RcsSectionResultOverview>>> CalculateWithHttpInfoAsync(Guid projectId, RcsCalculationParameters rcsCalculationParameters = default(RcsCalculationParameters), string requestedType = null, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            IdeaStatiCa.RcsApi.Client.RequestOptions localVarRequestOptions = new IdeaStatiCa.RcsApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = IdeaStatiCa.RcsApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            string localVarAccept = requestedType;
            if(string.IsNullOrEmpty(localVarAccept))
            {
                localVarAccept = IdeaStatiCa.RcsApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            }

            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("projectId", IdeaStatiCa.RcsApi.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.Data = rcsCalculationParameters;

            localVarRequestOptions.Operation = "CalculationApi.Calculate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<List<RcsSectionResultOverview>>("/api/1/projects/{projectId}/calculate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Calculate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get calculated results 
        /// </summary>
        /// <exception cref="IdeaStatiCa.RcsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project Id</param>
        /// <param name="rcsResultParameters">Calculation parameters (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;RcsSectionResultDetailed&gt;</returns>
        public List<RcsSectionResultDetailed> GetResults(Guid projectId, RcsResultParameters rcsResultParameters = default(RcsResultParameters), int operationIndex = 0)
        {
            IdeaStatiCa.RcsApi.Client.ApiResponse<List<RcsSectionResultDetailed>> localVarResponse = GetResultsWithHttpInfo(projectId, rcsResultParameters);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get calculated results 
        /// </summary>
        /// <exception cref="IdeaStatiCa.RcsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project Id</param>
/// <param name="rcsResultParameters">Calculation parameters (optional)</param>
        /// <param name="requestedType">Requested content type in the response.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;RcsSectionResultDetailed&gt;</returns>
        public IdeaStatiCa.RcsApi.Client.ApiResponse<List<RcsSectionResultDetailed>> GetResultsWithHttpInfo(Guid projectId, RcsResultParameters rcsResultParameters = default(RcsResultParameters), string requestedType = null, int operationIndex = 0)
        {
            IdeaStatiCa.RcsApi.Client.RequestOptions localVarRequestOptions = new IdeaStatiCa.RcsApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = IdeaStatiCa.RcsApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            string localVarAccept = requestedType;

            if(string.IsNullOrEmpty(localVarAccept))
            {
                localVarAccept = IdeaStatiCa.RcsApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
                if (localVarAccept != null)
                {
                    localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
                }
            }

            localVarRequestOptions.PathParameters.Add("projectId", IdeaStatiCa.RcsApi.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.Data = rcsResultParameters;

            localVarRequestOptions.Operation = "CalculationApi.GetResults";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<List<RcsSectionResultDetailed>>("/api/1/projects/{projectId}/get-results", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetResults", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get calculated results 
        /// </summary>
        /// <exception cref="IdeaStatiCa.RcsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project Id</param>
        /// <param name="rcsResultParameters">Calculation parameters (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;RcsSectionResultDetailed&gt;</returns>
        public async System.Threading.Tasks.Task<List<RcsSectionResultDetailed>> GetResultsAsync(Guid projectId, RcsResultParameters rcsResultParameters = default(RcsResultParameters), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            IdeaStatiCa.RcsApi.Client.ApiResponse<List<RcsSectionResultDetailed>> localVarResponse = await GetResultsWithHttpInfoAsync(projectId, rcsResultParameters, null, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get calculated results 
        /// </summary>
        /// <exception cref="IdeaStatiCa.RcsApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project Id</param>
        /// <param name="rcsResultParameters">Calculation parameters (optional)</param>
        /// <param name="requestedType">Requested content type in the response.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;RcsSectionResultDetailed&gt;)</returns>
        public async System.Threading.Tasks.Task<IdeaStatiCa.RcsApi.Client.ApiResponse<List<RcsSectionResultDetailed>>> GetResultsWithHttpInfoAsync(Guid projectId, RcsResultParameters rcsResultParameters = default(RcsResultParameters), string requestedType = null, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            IdeaStatiCa.RcsApi.Client.RequestOptions localVarRequestOptions = new IdeaStatiCa.RcsApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = IdeaStatiCa.RcsApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            string localVarAccept = requestedType;
            if(string.IsNullOrEmpty(localVarAccept))
            {
                localVarAccept = IdeaStatiCa.RcsApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            }

            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("projectId", IdeaStatiCa.RcsApi.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.Data = rcsResultParameters;

            localVarRequestOptions.Operation = "CalculationApi.GetResults";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<List<RcsSectionResultDetailed>>("/api/1/projects/{projectId}/get-results", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetResults", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
