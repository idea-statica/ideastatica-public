# coding: utf-8

"""
    RCS Rest API 1.0

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from ideastatica_rcs_api.models.poly_line2_d import PolyLine2D
from ideastatica_rcs_api.models.reference_element import ReferenceElement
from typing import Optional, Set
from typing_extensions import Self

class Stirrup(BaseModel):
    """
    Stirrup
    """ # noqa: E501
    geometry: Optional[PolyLine2D] = None
    diameter: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Diameter")
    material: Optional[ReferenceElement] = None
    anchorage_lenght: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Anchorage Lenght", alias="anchorageLenght")
    diameter_of_mandrel: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Radius of stirrup mandrel - refering to stirrup axis", alias="diameterOfMandrel")
    is_closed: Optional[StrictBool] = Field(default=None, description="Open / Closed stirrup", alias="isClosed")
    distance: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Longitudinal distance between stirrups")
    shear_check: Optional[StrictBool] = Field(default=None, description="Status of shear check, not possible for detailing stirrup", alias="shearCheck")
    torsion_check: Optional[StrictBool] = Field(default=None, description="Status of torsion check, not possible for detailing stirrup", alias="torsionCheck")
    __properties: ClassVar[List[str]] = ["geometry", "diameter", "material", "anchorageLenght", "diameterOfMandrel", "isClosed", "distance", "shearCheck", "torsionCheck"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Stirrup from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of geometry
        if self.geometry:
            _dict['geometry'] = self.geometry.to_dict()
        # override the default output from pydantic by calling `to_dict()` of material
        if self.material:
            _dict['material'] = self.material.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Stirrup from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "geometry": PolyLine2D.from_dict(obj["geometry"]) if obj.get("geometry") is not None else None,
            "diameter": obj.get("diameter"),
            "material": ReferenceElement.from_dict(obj["material"]) if obj.get("material") is not None else None,
            "anchorageLenght": obj.get("anchorageLenght"),
            "diameterOfMandrel": obj.get("diameterOfMandrel"),
            "isClosed": obj.get("isClosed"),
            "distance": obj.get("distance"),
            "shearCheck": obj.get("shearCheck"),
            "torsionCheck": obj.get("torsionCheck")
        })
        return _obj


