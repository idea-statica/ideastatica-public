# coding: utf-8

"""
    RCS Rest API 1.0

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from ideastatica_rcs_api.models.reference_element import ReferenceElement
from typing import Optional, Set
from typing_extensions import Self

class BoltAssembly(BaseModel):
    """
    Bolt assembly
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, description="Name of bolt assembly")
    bolt_grade: Optional[ReferenceElement] = Field(default=None, alias="boltGrade")
    diameter: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Bolt diameter")
    borehole: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Size of bore Hole")
    head_diameter: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Diameter of the head", alias="headDiameter")
    diagonal_head_diameter: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Second diameter of the head", alias="diagonalHeadDiameter")
    head_height: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Thickness of head", alias="headHeight")
    gross_area: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Gross cross-section area", alias="grossArea")
    tensile_stress_area: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Tensile stress area", alias="tensileStressArea")
    nut_thickness: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Thickness of Nut", alias="nutThickness")
    washer_thickness: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Thickness of washer", alias="washerThickness")
    washer_at_head: Optional[StrictBool] = Field(default=None, description="Washer at head side of bolt assembly", alias="washerAtHead")
    washer_at_nut: Optional[StrictBool] = Field(default=None, description="Is washer at Nut side of bolt assembly", alias="washerAtNut")
    load_from_library: Optional[StrictBool] = Field(default=None, description="Load from library - try override properties from library find BoltAssembly by name", alias="loadFromLibrary")
    id: Optional[StrictInt] = Field(default=None, description="Element Id")
    __properties: ClassVar[List[str]] = ["name", "boltGrade", "diameter", "borehole", "headDiameter", "diagonalHeadDiameter", "headHeight", "grossArea", "tensileStressArea", "nutThickness", "washerThickness", "washerAtHead", "washerAtNut", "loadFromLibrary", "id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BoltAssembly from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of bolt_grade
        if self.bolt_grade:
            _dict['boltGrade'] = self.bolt_grade.to_dict()
        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BoltAssembly from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "boltGrade": ReferenceElement.from_dict(obj["boltGrade"]) if obj.get("boltGrade") is not None else None,
            "diameter": obj.get("diameter"),
            "borehole": obj.get("borehole"),
            "headDiameter": obj.get("headDiameter"),
            "diagonalHeadDiameter": obj.get("diagonalHeadDiameter"),
            "headHeight": obj.get("headHeight"),
            "grossArea": obj.get("grossArea"),
            "tensileStressArea": obj.get("tensileStressArea"),
            "nutThickness": obj.get("nutThickness"),
            "washerThickness": obj.get("washerThickness"),
            "washerAtHead": obj.get("washerAtHead"),
            "washerAtNut": obj.get("washerAtNut"),
            "loadFromLibrary": obj.get("loadFromLibrary"),
            "id": obj.get("id")
        })
        return _obj


