# coding: utf-8

"""
    RCS Rest API 1.0

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ideastatica_rcs_api.models.reference_element import ReferenceElement
from ideastatica_rcs_api.models.reinforced_bar import ReinforcedBar
from ideastatica_rcs_api.models.stirrup import Stirrup
from ideastatica_rcs_api.models.tendon_bar import TendonBar
from ideastatica_rcs_api.models.tendon_duct import TendonDuct
from typing import Optional, Set
from typing_extensions import Self

class ReinforcedCrossSection(BaseModel):
    """
    Reinforced cross-section
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, description="Name of cross-section")
    cross_section: Optional[ReferenceElement] = Field(default=None, alias="crossSection")
    bars: Optional[List[ReinforcedBar]] = Field(default=None, description="Reinforced bars")
    stirrups: Optional[List[Stirrup]] = Field(default=None, description="Stirrups")
    tendon_bars: Optional[List[TendonBar]] = Field(default=None, description="Tendon bars", alias="tendonBars")
    tendon_ducts: Optional[List[TendonDuct]] = Field(default=None, description="Tendon ducts", alias="tendonDucts")
    id: Optional[StrictInt] = Field(default=None, description="Element Id")
    __properties: ClassVar[List[str]] = ["name", "crossSection", "bars", "stirrups", "tendonBars", "tendonDucts", "id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ReinforcedCrossSection from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of cross_section
        if self.cross_section:
            _dict['crossSection'] = self.cross_section.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in bars (list)
        _items = []
        if self.bars:
            for _item_bars in self.bars:
                if _item_bars:
                    _items.append(_item_bars.to_dict())
            _dict['bars'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in stirrups (list)
        _items = []
        if self.stirrups:
            for _item_stirrups in self.stirrups:
                if _item_stirrups:
                    _items.append(_item_stirrups.to_dict())
            _dict['stirrups'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in tendon_bars (list)
        _items = []
        if self.tendon_bars:
            for _item_tendon_bars in self.tendon_bars:
                if _item_tendon_bars:
                    _items.append(_item_tendon_bars.to_dict())
            _dict['tendonBars'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in tendon_ducts (list)
        _items = []
        if self.tendon_ducts:
            for _item_tendon_ducts in self.tendon_ducts:
                if _item_tendon_ducts:
                    _items.append(_item_tendon_ducts.to_dict())
            _dict['tendonDucts'] = _items
        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if bars (nullable) is None
        # and model_fields_set contains the field
        if self.bars is None and "bars" in self.model_fields_set:
            _dict['bars'] = None

        # set to None if stirrups (nullable) is None
        # and model_fields_set contains the field
        if self.stirrups is None and "stirrups" in self.model_fields_set:
            _dict['stirrups'] = None

        # set to None if tendon_bars (nullable) is None
        # and model_fields_set contains the field
        if self.tendon_bars is None and "tendon_bars" in self.model_fields_set:
            _dict['tendonBars'] = None

        # set to None if tendon_ducts (nullable) is None
        # and model_fields_set contains the field
        if self.tendon_ducts is None and "tendon_ducts" in self.model_fields_set:
            _dict['tendonDucts'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ReinforcedCrossSection from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "crossSection": ReferenceElement.from_dict(obj["crossSection"]) if obj.get("crossSection") is not None else None,
            "bars": [ReinforcedBar.from_dict(_item) for _item in obj["bars"]] if obj.get("bars") is not None else None,
            "stirrups": [Stirrup.from_dict(_item) for _item in obj["stirrups"]] if obj.get("stirrups") is not None else None,
            "tendonBars": [TendonBar.from_dict(_item) for _item in obj["tendonBars"]] if obj.get("tendonBars") is not None else None,
            "tendonDucts": [TendonDuct.from_dict(_item) for _item in obj["tendonDucts"]] if obj.get("tendonDucts") is not None else None,
            "id": obj.get("id")
        })
        return _obj


