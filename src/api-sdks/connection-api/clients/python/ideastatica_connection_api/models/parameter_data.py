# coding: utf-8

"""
    Connection Rest API 1.0

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ideastatica_connection_api.models.validation_type import ValidationType
from typing import Optional, Set
from typing_extensions import Self

class ParameterData(BaseModel):
    """
    ParameterData
    """ # noqa: E501
    id: Optional[StrictInt] = None
    identifier: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    parameter_type: Optional[StrictStr] = Field(default=None, alias="parameterType")
    value: Optional[Any] = None
    default_value: Optional[Any] = Field(default=None, alias="defaultValue")
    evaluated_value: Optional[Any] = Field(default=None, alias="evaluatedValue")
    evaluated_default_value: Optional[Any] = Field(default=None, alias="evaluatedDefaultValue")
    validation_value: Optional[StrictStr] = Field(default=None, alias="validationValue")
    evaluated_validation_value: Optional[StrictStr] = Field(default=None, alias="evaluatedValidationValue")
    validation_type: Optional[ValidationType] = Field(default=None, alias="validationType")
    user_unit_id: Optional[StrictInt] = Field(default=None, alias="userUnitId")
    is_visible_for_simple_connection: Optional[StrictBool] = Field(default=None, alias="isVisibleForSimpleConnection")
    __properties: ClassVar[List[str]] = ["id", "identifier", "description", "parameterType", "value", "defaultValue", "evaluatedValue", "evaluatedDefaultValue", "validationValue", "evaluatedValidationValue", "validationType", "userUnitId", "isVisibleForSimpleConnection"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ParameterData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if identifier (nullable) is None
        # and model_fields_set contains the field
        if self.identifier is None and "identifier" in self.model_fields_set:
            _dict['identifier'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if parameter_type (nullable) is None
        # and model_fields_set contains the field
        if self.parameter_type is None and "parameter_type" in self.model_fields_set:
            _dict['parameterType'] = None

        # set to None if value (nullable) is None
        # and model_fields_set contains the field
        if self.value is None and "value" in self.model_fields_set:
            _dict['value'] = None

        # set to None if default_value (nullable) is None
        # and model_fields_set contains the field
        if self.default_value is None and "default_value" in self.model_fields_set:
            _dict['defaultValue'] = None

        # set to None if evaluated_value (nullable) is None
        # and model_fields_set contains the field
        if self.evaluated_value is None and "evaluated_value" in self.model_fields_set:
            _dict['evaluatedValue'] = None

        # set to None if evaluated_default_value (nullable) is None
        # and model_fields_set contains the field
        if self.evaluated_default_value is None and "evaluated_default_value" in self.model_fields_set:
            _dict['evaluatedDefaultValue'] = None

        # set to None if validation_value (nullable) is None
        # and model_fields_set contains the field
        if self.validation_value is None and "validation_value" in self.model_fields_set:
            _dict['validationValue'] = None

        # set to None if evaluated_validation_value (nullable) is None
        # and model_fields_set contains the field
        if self.evaluated_validation_value is None and "evaluated_validation_value" in self.model_fields_set:
            _dict['evaluatedValidationValue'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ParameterData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "identifier": obj.get("identifier"),
            "description": obj.get("description"),
            "parameterType": obj.get("parameterType"),
            "value": obj.get("value"),
            "defaultValue": obj.get("defaultValue"),
            "evaluatedValue": obj.get("evaluatedValue"),
            "evaluatedDefaultValue": obj.get("evaluatedDefaultValue"),
            "validationValue": obj.get("validationValue"),
            "evaluatedValidationValue": obj.get("evaluatedValidationValue"),
            "validationType": obj.get("validationType"),
            "userUnitId": obj.get("userUnitId"),
            "isVisibleForSimpleConnection": obj.get("isVisibleForSimpleConnection")
        })
        return _obj


