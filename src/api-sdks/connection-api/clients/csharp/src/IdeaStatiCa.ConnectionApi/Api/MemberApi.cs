/*
 * Connection Rest API 1.0
 *
 * IDEA StatiCa Connection API, used for the automated design and calculation of steel connections.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: info@ideastatica.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using IdeaRS.OpenModel;
using IdeaRS.OpenModel.Connection;
using IdeaStatiCa.Api.Connection.Model;
using IdeaStatiCa.Api.Connection.Model.Connection;
using IdeaStatiCa.Api.Connection.Model.Material;
using IdeaStatiCa.ConnectionApi.Client;
using IdeaStatiCa.ConnectionApi.Model;

namespace IdeaStatiCa.ConnectionApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMemberApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get information about the requires member in the connection
        /// </summary>
        /// <exception cref="IdeaStatiCa.ConnectionApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The unique identifier of the opened project in the ConnectionRestApi service</param>
        /// <param name="connectionId">Id of the connection to get its member</param>
        /// <param name="memberId">Id of the requested member in the connection</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConMember</returns>
        ConMember GetMember(Guid projectId, int connectionId, int memberId, int operationIndex = 0);

        /// <summary>
        /// Get information about the requires member in the connection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IdeaStatiCa.ConnectionApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The unique identifier of the opened project in the ConnectionRestApi service</param>
/// <param name="connectionId">Id of the connection to get its member</param>
/// <param name="memberId">Id of the requested member in the connection</param>
        /// <param name="requestedType">Requested content type in the response.</param>        
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConMember</returns>
        ApiResponse<ConMember> GetMemberWithHttpInfo(Guid projectId, int connectionId, int memberId, string requestedType = null, int operationIndex = 0);
        /// <summary>
        /// Get information about all members in the connection
        /// </summary>
        /// <exception cref="IdeaStatiCa.ConnectionApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The unique identifier of the opened project in the ConnectionRestApi service</param>
        /// <param name="connectionId">Id of the connection to get its members</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ConMember&gt;</returns>
        List<ConMember> GetMembers(Guid projectId, int connectionId, int operationIndex = 0);

        /// <summary>
        /// Get information about all members in the connection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IdeaStatiCa.ConnectionApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The unique identifier of the opened project in the ConnectionRestApi service</param>
/// <param name="connectionId">Id of the connection to get its members</param>
        /// <param name="requestedType">Requested content type in the response.</param>        
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ConMember&gt;</returns>
        ApiResponse<List<ConMember>> GetMembersWithHttpInfo(Guid projectId, int connectionId, string requestedType = null, int operationIndex = 0);
        /// <summary>
        /// Set bearing member for memberIt
        /// </summary>
        /// <exception cref="IdeaStatiCa.ConnectionApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="connectionId"></param>
        /// <param name="memberId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConMember</returns>
        ConMember SetBearingMember(Guid projectId, int connectionId, int memberId, int operationIndex = 0);

        /// <summary>
        /// Set bearing member for memberIt
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IdeaStatiCa.ConnectionApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
/// <param name="connectionId"></param>
/// <param name="memberId"></param>
        /// <param name="requestedType">Requested content type in the response.</param>        
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConMember</returns>
        ApiResponse<ConMember> SetBearingMemberWithHttpInfo(Guid projectId, int connectionId, int memberId, string requestedType = null, int operationIndex = 0);
        /// <summary>
        /// Update the member in the connection by newMemberData
        /// </summary>
        /// <exception cref="IdeaStatiCa.ConnectionApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The unique identifier of the opened project in the ConnectionRestApi service</param>
        /// <param name="connectionId">Id of the connection to to update is member newMemberData</param>
        /// <param name="conMember">New member data (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConMember</returns>
        ConMember UpdateMember(Guid projectId, int connectionId, ConMember conMember = default(ConMember), int operationIndex = 0);

        /// <summary>
        /// Update the member in the connection by newMemberData
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IdeaStatiCa.ConnectionApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The unique identifier of the opened project in the ConnectionRestApi service</param>
/// <param name="connectionId">Id of the connection to to update is member newMemberData</param>
/// <param name="conMember">New member data (optional)</param>
        /// <param name="requestedType">Requested content type in the response.</param>        
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConMember</returns>
        ApiResponse<ConMember> UpdateMemberWithHttpInfo(Guid projectId, int connectionId, ConMember conMember = default(ConMember), string requestedType = null, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMemberApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get information about the requires member in the connection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IdeaStatiCa.ConnectionApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The unique identifier of the opened project in the ConnectionRestApi service</param>
        /// <param name="connectionId">Id of the connection to get its member</param>
        /// <param name="memberId">Id of the requested member in the connection</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConMember</returns>
        System.Threading.Tasks.Task<ConMember> GetMemberAsync(Guid projectId, int connectionId, int memberId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get information about the requires member in the connection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IdeaStatiCa.ConnectionApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The unique identifier of the opened project in the ConnectionRestApi service</param>
        /// <param name="connectionId">Id of the connection to get its member</param>
        /// <param name="memberId">Id of the requested member in the connection</param>
        /// <param name="requestedType">Requested content type in the response.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConMember)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConMember>> GetMemberWithHttpInfoAsync(Guid projectId, int connectionId, int memberId, string requestedType = null, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get information about all members in the connection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IdeaStatiCa.ConnectionApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The unique identifier of the opened project in the ConnectionRestApi service</param>
        /// <param name="connectionId">Id of the connection to get its members</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ConMember&gt;</returns>
        System.Threading.Tasks.Task<List<ConMember>> GetMembersAsync(Guid projectId, int connectionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get information about all members in the connection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IdeaStatiCa.ConnectionApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The unique identifier of the opened project in the ConnectionRestApi service</param>
        /// <param name="connectionId">Id of the connection to get its members</param>
        /// <param name="requestedType">Requested content type in the response.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ConMember&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ConMember>>> GetMembersWithHttpInfoAsync(Guid projectId, int connectionId, string requestedType = null, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Set bearing member for memberIt
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IdeaStatiCa.ConnectionApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="connectionId"></param>
        /// <param name="memberId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConMember</returns>
        System.Threading.Tasks.Task<ConMember> SetBearingMemberAsync(Guid projectId, int connectionId, int memberId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Set bearing member for memberIt
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IdeaStatiCa.ConnectionApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="connectionId"></param>
        /// <param name="memberId"></param>
        /// <param name="requestedType">Requested content type in the response.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConMember)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConMember>> SetBearingMemberWithHttpInfoAsync(Guid projectId, int connectionId, int memberId, string requestedType = null, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update the member in the connection by newMemberData
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IdeaStatiCa.ConnectionApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The unique identifier of the opened project in the ConnectionRestApi service</param>
        /// <param name="connectionId">Id of the connection to to update is member newMemberData</param>
        /// <param name="conMember">New member data (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConMember</returns>
        System.Threading.Tasks.Task<ConMember> UpdateMemberAsync(Guid projectId, int connectionId, ConMember conMember = default(ConMember), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update the member in the connection by newMemberData
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IdeaStatiCa.ConnectionApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The unique identifier of the opened project in the ConnectionRestApi service</param>
        /// <param name="connectionId">Id of the connection to to update is member newMemberData</param>
        /// <param name="conMember">New member data (optional)</param>
        /// <param name="requestedType">Requested content type in the response.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConMember)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConMember>> UpdateMemberWithHttpInfoAsync(Guid projectId, int connectionId, ConMember conMember = default(ConMember), string requestedType = null, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMemberApi : IMemberApiSync, IMemberApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MemberApi : IMemberApi
    {
        private IdeaStatiCa.ConnectionApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MemberApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MemberApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MemberApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MemberApi(string basePath)
        {
            this.Configuration = IdeaStatiCa.ConnectionApi.Client.Configuration.MergeConfigurations(
                IdeaStatiCa.ConnectionApi.Client.GlobalConfiguration.Instance,
                new IdeaStatiCa.ConnectionApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new IdeaStatiCa.ConnectionApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new IdeaStatiCa.ConnectionApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = IdeaStatiCa.ConnectionApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MemberApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MemberApi(IdeaStatiCa.ConnectionApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = IdeaStatiCa.ConnectionApi.Client.Configuration.MergeConfigurations(
                IdeaStatiCa.ConnectionApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new IdeaStatiCa.ConnectionApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new IdeaStatiCa.ConnectionApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = IdeaStatiCa.ConnectionApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MemberApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public MemberApi(IdeaStatiCa.ConnectionApi.Client.ISynchronousClient client, IdeaStatiCa.ConnectionApi.Client.IAsynchronousClient asyncClient, IdeaStatiCa.ConnectionApi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = IdeaStatiCa.ConnectionApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public IdeaStatiCa.ConnectionApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public IdeaStatiCa.ConnectionApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IdeaStatiCa.ConnectionApi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IdeaStatiCa.ConnectionApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get information about the requires member in the connection 
        /// </summary>
        /// <exception cref="IdeaStatiCa.ConnectionApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The unique identifier of the opened project in the ConnectionRestApi service</param>
        /// <param name="connectionId">Id of the connection to get its member</param>
        /// <param name="memberId">Id of the requested member in the connection</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConMember</returns>
        public ConMember GetMember(Guid projectId, int connectionId, int memberId, int operationIndex = 0)
        {
            IdeaStatiCa.ConnectionApi.Client.ApiResponse<ConMember> localVarResponse = GetMemberWithHttpInfo(projectId, connectionId, memberId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get information about the requires member in the connection 
        /// </summary>
        /// <exception cref="IdeaStatiCa.ConnectionApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The unique identifier of the opened project in the ConnectionRestApi service</param>
/// <param name="connectionId">Id of the connection to get its member</param>
/// <param name="memberId">Id of the requested member in the connection</param>
        /// <param name="requestedType">Requested content type in the response.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConMember</returns>
        public IdeaStatiCa.ConnectionApi.Client.ApiResponse<ConMember> GetMemberWithHttpInfo(Guid projectId, int connectionId, int memberId, string requestedType = null, int operationIndex = 0)
        {
            IdeaStatiCa.ConnectionApi.Client.RequestOptions localVarRequestOptions = new IdeaStatiCa.ConnectionApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = IdeaStatiCa.ConnectionApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            string localVarAccept = requestedType;

            if(string.IsNullOrEmpty(localVarAccept))
            {
                localVarAccept = IdeaStatiCa.ConnectionApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
                if (localVarAccept != null)
                {
                    localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
                }
            }

            localVarRequestOptions.PathParameters.Add("projectId", IdeaStatiCa.ConnectionApi.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("connectionId", IdeaStatiCa.ConnectionApi.Client.ClientUtils.ParameterToString(connectionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("memberId", IdeaStatiCa.ConnectionApi.Client.ClientUtils.ParameterToString(memberId)); // path parameter

            localVarRequestOptions.Operation = "MemberApi.GetMember";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ConMember>("/api/1/projects/{projectId}/connections/{connectionId}/members/{memberId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMember", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get information about the requires member in the connection 
        /// </summary>
        /// <exception cref="IdeaStatiCa.ConnectionApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The unique identifier of the opened project in the ConnectionRestApi service</param>
        /// <param name="connectionId">Id of the connection to get its member</param>
        /// <param name="memberId">Id of the requested member in the connection</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConMember</returns>
        public async System.Threading.Tasks.Task<ConMember> GetMemberAsync(Guid projectId, int connectionId, int memberId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            IdeaStatiCa.ConnectionApi.Client.ApiResponse<ConMember> localVarResponse = await GetMemberWithHttpInfoAsync(projectId, connectionId, memberId, null, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get information about the requires member in the connection 
        /// </summary>
        /// <exception cref="IdeaStatiCa.ConnectionApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The unique identifier of the opened project in the ConnectionRestApi service</param>
        /// <param name="connectionId">Id of the connection to get its member</param>
        /// <param name="memberId">Id of the requested member in the connection</param>
        /// <param name="requestedType">Requested content type in the response.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConMember)</returns>
        public async System.Threading.Tasks.Task<IdeaStatiCa.ConnectionApi.Client.ApiResponse<ConMember>> GetMemberWithHttpInfoAsync(Guid projectId, int connectionId, int memberId, string requestedType = null, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            IdeaStatiCa.ConnectionApi.Client.RequestOptions localVarRequestOptions = new IdeaStatiCa.ConnectionApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = IdeaStatiCa.ConnectionApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            string localVarAccept = requestedType;
            if(string.IsNullOrEmpty(localVarAccept))
            {
                localVarAccept = IdeaStatiCa.ConnectionApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            }

            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("projectId", IdeaStatiCa.ConnectionApi.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("connectionId", IdeaStatiCa.ConnectionApi.Client.ClientUtils.ParameterToString(connectionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("memberId", IdeaStatiCa.ConnectionApi.Client.ClientUtils.ParameterToString(memberId)); // path parameter

            localVarRequestOptions.Operation = "MemberApi.GetMember";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ConMember>("/api/1/projects/{projectId}/connections/{connectionId}/members/{memberId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMember", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get information about all members in the connection 
        /// </summary>
        /// <exception cref="IdeaStatiCa.ConnectionApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The unique identifier of the opened project in the ConnectionRestApi service</param>
        /// <param name="connectionId">Id of the connection to get its members</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ConMember&gt;</returns>
        public List<ConMember> GetMembers(Guid projectId, int connectionId, int operationIndex = 0)
        {
            IdeaStatiCa.ConnectionApi.Client.ApiResponse<List<ConMember>> localVarResponse = GetMembersWithHttpInfo(projectId, connectionId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get information about all members in the connection 
        /// </summary>
        /// <exception cref="IdeaStatiCa.ConnectionApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The unique identifier of the opened project in the ConnectionRestApi service</param>
/// <param name="connectionId">Id of the connection to get its members</param>
        /// <param name="requestedType">Requested content type in the response.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ConMember&gt;</returns>
        public IdeaStatiCa.ConnectionApi.Client.ApiResponse<List<ConMember>> GetMembersWithHttpInfo(Guid projectId, int connectionId, string requestedType = null, int operationIndex = 0)
        {
            IdeaStatiCa.ConnectionApi.Client.RequestOptions localVarRequestOptions = new IdeaStatiCa.ConnectionApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = IdeaStatiCa.ConnectionApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            string localVarAccept = requestedType;

            if(string.IsNullOrEmpty(localVarAccept))
            {
                localVarAccept = IdeaStatiCa.ConnectionApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
                if (localVarAccept != null)
                {
                    localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
                }
            }

            localVarRequestOptions.PathParameters.Add("projectId", IdeaStatiCa.ConnectionApi.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("connectionId", IdeaStatiCa.ConnectionApi.Client.ClientUtils.ParameterToString(connectionId)); // path parameter

            localVarRequestOptions.Operation = "MemberApi.GetMembers";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ConMember>>("/api/1/projects/{projectId}/connections/{connectionId}/members", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMembers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get information about all members in the connection 
        /// </summary>
        /// <exception cref="IdeaStatiCa.ConnectionApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The unique identifier of the opened project in the ConnectionRestApi service</param>
        /// <param name="connectionId">Id of the connection to get its members</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ConMember&gt;</returns>
        public async System.Threading.Tasks.Task<List<ConMember>> GetMembersAsync(Guid projectId, int connectionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            IdeaStatiCa.ConnectionApi.Client.ApiResponse<List<ConMember>> localVarResponse = await GetMembersWithHttpInfoAsync(projectId, connectionId, null, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get information about all members in the connection 
        /// </summary>
        /// <exception cref="IdeaStatiCa.ConnectionApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The unique identifier of the opened project in the ConnectionRestApi service</param>
        /// <param name="connectionId">Id of the connection to get its members</param>
        /// <param name="requestedType">Requested content type in the response.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ConMember&gt;)</returns>
        public async System.Threading.Tasks.Task<IdeaStatiCa.ConnectionApi.Client.ApiResponse<List<ConMember>>> GetMembersWithHttpInfoAsync(Guid projectId, int connectionId, string requestedType = null, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            IdeaStatiCa.ConnectionApi.Client.RequestOptions localVarRequestOptions = new IdeaStatiCa.ConnectionApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = IdeaStatiCa.ConnectionApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            string localVarAccept = requestedType;
            if(string.IsNullOrEmpty(localVarAccept))
            {
                localVarAccept = IdeaStatiCa.ConnectionApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            }

            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("projectId", IdeaStatiCa.ConnectionApi.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("connectionId", IdeaStatiCa.ConnectionApi.Client.ClientUtils.ParameterToString(connectionId)); // path parameter

            localVarRequestOptions.Operation = "MemberApi.GetMembers";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ConMember>>("/api/1/projects/{projectId}/connections/{connectionId}/members", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMembers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set bearing member for memberIt 
        /// </summary>
        /// <exception cref="IdeaStatiCa.ConnectionApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="connectionId"></param>
        /// <param name="memberId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConMember</returns>
        public ConMember SetBearingMember(Guid projectId, int connectionId, int memberId, int operationIndex = 0)
        {
            IdeaStatiCa.ConnectionApi.Client.ApiResponse<ConMember> localVarResponse = SetBearingMemberWithHttpInfo(projectId, connectionId, memberId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set bearing member for memberIt 
        /// </summary>
        /// <exception cref="IdeaStatiCa.ConnectionApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
/// <param name="connectionId"></param>
/// <param name="memberId"></param>
        /// <param name="requestedType">Requested content type in the response.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConMember</returns>
        public IdeaStatiCa.ConnectionApi.Client.ApiResponse<ConMember> SetBearingMemberWithHttpInfo(Guid projectId, int connectionId, int memberId, string requestedType = null, int operationIndex = 0)
        {
            IdeaStatiCa.ConnectionApi.Client.RequestOptions localVarRequestOptions = new IdeaStatiCa.ConnectionApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = IdeaStatiCa.ConnectionApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            string localVarAccept = requestedType;

            if(string.IsNullOrEmpty(localVarAccept))
            {
                localVarAccept = IdeaStatiCa.ConnectionApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
                if (localVarAccept != null)
                {
                    localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
                }
            }

            localVarRequestOptions.PathParameters.Add("projectId", IdeaStatiCa.ConnectionApi.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("connectionId", IdeaStatiCa.ConnectionApi.Client.ClientUtils.ParameterToString(connectionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("memberId", IdeaStatiCa.ConnectionApi.Client.ClientUtils.ParameterToString(memberId)); // path parameter

            localVarRequestOptions.Operation = "MemberApi.SetBearingMember";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<ConMember>("/api/1/projects/{projectId}/connections/{connectionId}/members/{memberId}/set-bearing-member", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetBearingMember", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set bearing member for memberIt 
        /// </summary>
        /// <exception cref="IdeaStatiCa.ConnectionApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="connectionId"></param>
        /// <param name="memberId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConMember</returns>
        public async System.Threading.Tasks.Task<ConMember> SetBearingMemberAsync(Guid projectId, int connectionId, int memberId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            IdeaStatiCa.ConnectionApi.Client.ApiResponse<ConMember> localVarResponse = await SetBearingMemberWithHttpInfoAsync(projectId, connectionId, memberId, null, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set bearing member for memberIt 
        /// </summary>
        /// <exception cref="IdeaStatiCa.ConnectionApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="connectionId"></param>
        /// <param name="memberId"></param>
        /// <param name="requestedType">Requested content type in the response.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConMember)</returns>
        public async System.Threading.Tasks.Task<IdeaStatiCa.ConnectionApi.Client.ApiResponse<ConMember>> SetBearingMemberWithHttpInfoAsync(Guid projectId, int connectionId, int memberId, string requestedType = null, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            IdeaStatiCa.ConnectionApi.Client.RequestOptions localVarRequestOptions = new IdeaStatiCa.ConnectionApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = IdeaStatiCa.ConnectionApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            string localVarAccept = requestedType;
            if(string.IsNullOrEmpty(localVarAccept))
            {
                localVarAccept = IdeaStatiCa.ConnectionApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            }

            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("projectId", IdeaStatiCa.ConnectionApi.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("connectionId", IdeaStatiCa.ConnectionApi.Client.ClientUtils.ParameterToString(connectionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("memberId", IdeaStatiCa.ConnectionApi.Client.ClientUtils.ParameterToString(memberId)); // path parameter

            localVarRequestOptions.Operation = "MemberApi.SetBearingMember";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ConMember>("/api/1/projects/{projectId}/connections/{connectionId}/members/{memberId}/set-bearing-member", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetBearingMember", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update the member in the connection by newMemberData 
        /// </summary>
        /// <exception cref="IdeaStatiCa.ConnectionApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The unique identifier of the opened project in the ConnectionRestApi service</param>
        /// <param name="connectionId">Id of the connection to to update is member newMemberData</param>
        /// <param name="conMember">New member data (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConMember</returns>
        public ConMember UpdateMember(Guid projectId, int connectionId, ConMember conMember = default(ConMember), int operationIndex = 0)
        {
            IdeaStatiCa.ConnectionApi.Client.ApiResponse<ConMember> localVarResponse = UpdateMemberWithHttpInfo(projectId, connectionId, conMember);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update the member in the connection by newMemberData 
        /// </summary>
        /// <exception cref="IdeaStatiCa.ConnectionApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The unique identifier of the opened project in the ConnectionRestApi service</param>
/// <param name="connectionId">Id of the connection to to update is member newMemberData</param>
/// <param name="conMember">New member data (optional)</param>
        /// <param name="requestedType">Requested content type in the response.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConMember</returns>
        public IdeaStatiCa.ConnectionApi.Client.ApiResponse<ConMember> UpdateMemberWithHttpInfo(Guid projectId, int connectionId, ConMember conMember = default(ConMember), string requestedType = null, int operationIndex = 0)
        {
            IdeaStatiCa.ConnectionApi.Client.RequestOptions localVarRequestOptions = new IdeaStatiCa.ConnectionApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = IdeaStatiCa.ConnectionApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            string localVarAccept = requestedType;

            if(string.IsNullOrEmpty(localVarAccept))
            {
                localVarAccept = IdeaStatiCa.ConnectionApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
                if (localVarAccept != null)
                {
                    localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
                }
            }

            localVarRequestOptions.PathParameters.Add("projectId", IdeaStatiCa.ConnectionApi.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("connectionId", IdeaStatiCa.ConnectionApi.Client.ClientUtils.ParameterToString(connectionId)); // path parameter
            localVarRequestOptions.Data = conMember;

            localVarRequestOptions.Operation = "MemberApi.UpdateMember";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<ConMember>("/api/1/projects/{projectId}/connections/{connectionId}/members", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateMember", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update the member in the connection by newMemberData 
        /// </summary>
        /// <exception cref="IdeaStatiCa.ConnectionApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The unique identifier of the opened project in the ConnectionRestApi service</param>
        /// <param name="connectionId">Id of the connection to to update is member newMemberData</param>
        /// <param name="conMember">New member data (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConMember</returns>
        public async System.Threading.Tasks.Task<ConMember> UpdateMemberAsync(Guid projectId, int connectionId, ConMember conMember = default(ConMember), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            IdeaStatiCa.ConnectionApi.Client.ApiResponse<ConMember> localVarResponse = await UpdateMemberWithHttpInfoAsync(projectId, connectionId, conMember, null, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update the member in the connection by newMemberData 
        /// </summary>
        /// <exception cref="IdeaStatiCa.ConnectionApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The unique identifier of the opened project in the ConnectionRestApi service</param>
        /// <param name="connectionId">Id of the connection to to update is member newMemberData</param>
        /// <param name="conMember">New member data (optional)</param>
        /// <param name="requestedType">Requested content type in the response.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConMember)</returns>
        public async System.Threading.Tasks.Task<IdeaStatiCa.ConnectionApi.Client.ApiResponse<ConMember>> UpdateMemberWithHttpInfoAsync(Guid projectId, int connectionId, ConMember conMember = default(ConMember), string requestedType = null, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            IdeaStatiCa.ConnectionApi.Client.RequestOptions localVarRequestOptions = new IdeaStatiCa.ConnectionApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = IdeaStatiCa.ConnectionApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            string localVarAccept = requestedType;
            if(string.IsNullOrEmpty(localVarAccept))
            {
                localVarAccept = IdeaStatiCa.ConnectionApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            }

            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("projectId", IdeaStatiCa.ConnectionApi.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("connectionId", IdeaStatiCa.ConnectionApi.Client.ClientUtils.ParameterToString(connectionId)); // path parameter
            localVarRequestOptions.Data = conMember;

            localVarRequestOptions.Operation = "MemberApi.UpdateMember";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ConMember>("/api/1/projects/{projectId}/connections/{connectionId}/members", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateMember", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
