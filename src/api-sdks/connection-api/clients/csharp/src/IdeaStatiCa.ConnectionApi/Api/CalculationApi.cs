/*
 * Connection Rest API 1.0
 *
 * IDEA StatiCa Connection API, used for the automated design and calculation of steel connections.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: info@ideastatica.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using IdeaRS.OpenModel;
using IdeaRS.OpenModel.Connection;
using IdeaStatiCa.Api.Connection.Model;
using IdeaStatiCa.Api.Connection.Model.Connection;
using IdeaStatiCa.Api.Connection.Model.Material;
using IdeaStatiCa.ConnectionApi.Client;
using IdeaStatiCa.ConnectionApi.Model;

namespace IdeaStatiCa.ConnectionApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICalculationApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Run CBFEM caluclation and return the summary of the results
        /// </summary>
        /// <exception cref="IdeaStatiCa.ConnectionApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The unique identifier of the opened project in the ConnectionRestApi service</param>
        /// <param name="conCalculationParameter">List of connections to calculate and a type of CBFEM analysis (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ConResultSummary&gt;</returns>
        List<ConResultSummary> Calculate(Guid projectId, ConCalculationParameter conCalculationParameter = default(ConCalculationParameter), int operationIndex = 0);

        /// <summary>
        /// Run CBFEM caluclation and return the summary of the results
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IdeaStatiCa.ConnectionApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The unique identifier of the opened project in the ConnectionRestApi service</param>
/// <param name="conCalculationParameter">List of connections to calculate and a type of CBFEM analysis (optional)</param>
        /// <param name="requestedType">Requested content type in the response.</param>        
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ConResultSummary&gt;</returns>
        ApiResponse<List<ConResultSummary>> CalculateWithHttpInfo(Guid projectId, ConCalculationParameter conCalculationParameter = default(ConCalculationParameter), string requestedType = null, int operationIndex = 0);
        /// <summary>
        /// Get json string which represents raw CBFEM results (an instance of CheckResultsData)
        /// </summary>
        /// <exception cref="IdeaStatiCa.ConnectionApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The unique identifier of the opened connection in the ConnectionRestApi service</param>
        /// <param name="conCalculationParameter">Type of requested analysis and connection to calculate (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> GetRawJsonResults(Guid projectId, ConCalculationParameter conCalculationParameter = default(ConCalculationParameter), int operationIndex = 0);

        /// <summary>
        /// Get json string which represents raw CBFEM results (an instance of CheckResultsData)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IdeaStatiCa.ConnectionApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The unique identifier of the opened connection in the ConnectionRestApi service</param>
/// <param name="conCalculationParameter">Type of requested analysis and connection to calculate (optional)</param>
        /// <param name="requestedType">Requested content type in the response.</param>        
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> GetRawJsonResultsWithHttpInfo(Guid projectId, ConCalculationParameter conCalculationParameter = default(ConCalculationParameter), string requestedType = null, int operationIndex = 0);
        /// <summary>
        /// Get detailed results of the CBFEM analysis
        /// </summary>
        /// <exception cref="IdeaStatiCa.ConnectionApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The unique identifier of the opened project in the ConnectionRestApi service</param>
        /// <param name="conCalculationParameter">List of connections to calculate and a type of CBFEM analysis (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ConnectionCheckRes&gt;</returns>
        List<ConnectionCheckRes> GetResults(Guid projectId, ConCalculationParameter conCalculationParameter = default(ConCalculationParameter), int operationIndex = 0);

        /// <summary>
        /// Get detailed results of the CBFEM analysis
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IdeaStatiCa.ConnectionApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The unique identifier of the opened project in the ConnectionRestApi service</param>
/// <param name="conCalculationParameter">List of connections to calculate and a type of CBFEM analysis (optional)</param>
        /// <param name="requestedType">Requested content type in the response.</param>        
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ConnectionCheckRes&gt;</returns>
        ApiResponse<List<ConnectionCheckRes>> GetResultsWithHttpInfo(Guid projectId, ConCalculationParameter conCalculationParameter = default(ConCalculationParameter), string requestedType = null, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICalculationApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Run CBFEM caluclation and return the summary of the results
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IdeaStatiCa.ConnectionApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The unique identifier of the opened project in the ConnectionRestApi service</param>
        /// <param name="conCalculationParameter">List of connections to calculate and a type of CBFEM analysis (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ConResultSummary&gt;</returns>
        System.Threading.Tasks.Task<List<ConResultSummary>> CalculateAsync(Guid projectId, ConCalculationParameter conCalculationParameter = default(ConCalculationParameter), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Run CBFEM caluclation and return the summary of the results
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IdeaStatiCa.ConnectionApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The unique identifier of the opened project in the ConnectionRestApi service</param>
        /// <param name="conCalculationParameter">List of connections to calculate and a type of CBFEM analysis (optional)</param>
        /// <param name="requestedType">Requested content type in the response.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ConResultSummary&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ConResultSummary>>> CalculateWithHttpInfoAsync(Guid projectId, ConCalculationParameter conCalculationParameter = default(ConCalculationParameter), string requestedType = null, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get json string which represents raw CBFEM results (an instance of CheckResultsData)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IdeaStatiCa.ConnectionApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The unique identifier of the opened connection in the ConnectionRestApi service</param>
        /// <param name="conCalculationParameter">Type of requested analysis and connection to calculate (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> GetRawJsonResultsAsync(Guid projectId, ConCalculationParameter conCalculationParameter = default(ConCalculationParameter), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get json string which represents raw CBFEM results (an instance of CheckResultsData)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IdeaStatiCa.ConnectionApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The unique identifier of the opened connection in the ConnectionRestApi service</param>
        /// <param name="conCalculationParameter">Type of requested analysis and connection to calculate (optional)</param>
        /// <param name="requestedType">Requested content type in the response.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> GetRawJsonResultsWithHttpInfoAsync(Guid projectId, ConCalculationParameter conCalculationParameter = default(ConCalculationParameter), string requestedType = null, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get detailed results of the CBFEM analysis
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IdeaStatiCa.ConnectionApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The unique identifier of the opened project in the ConnectionRestApi service</param>
        /// <param name="conCalculationParameter">List of connections to calculate and a type of CBFEM analysis (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ConnectionCheckRes&gt;</returns>
        System.Threading.Tasks.Task<List<ConnectionCheckRes>> GetResultsAsync(Guid projectId, ConCalculationParameter conCalculationParameter = default(ConCalculationParameter), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get detailed results of the CBFEM analysis
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IdeaStatiCa.ConnectionApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The unique identifier of the opened project in the ConnectionRestApi service</param>
        /// <param name="conCalculationParameter">List of connections to calculate and a type of CBFEM analysis (optional)</param>
        /// <param name="requestedType">Requested content type in the response.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ConnectionCheckRes&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ConnectionCheckRes>>> GetResultsWithHttpInfoAsync(Guid projectId, ConCalculationParameter conCalculationParameter = default(ConCalculationParameter), string requestedType = null, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICalculationApi : ICalculationApiSync, ICalculationApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CalculationApi : ICalculationApi
    {
        private IdeaStatiCa.ConnectionApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CalculationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CalculationApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CalculationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CalculationApi(string basePath)
        {
            this.Configuration = IdeaStatiCa.ConnectionApi.Client.Configuration.MergeConfigurations(
                IdeaStatiCa.ConnectionApi.Client.GlobalConfiguration.Instance,
                new IdeaStatiCa.ConnectionApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new IdeaStatiCa.ConnectionApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new IdeaStatiCa.ConnectionApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = IdeaStatiCa.ConnectionApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CalculationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CalculationApi(IdeaStatiCa.ConnectionApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = IdeaStatiCa.ConnectionApi.Client.Configuration.MergeConfigurations(
                IdeaStatiCa.ConnectionApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new IdeaStatiCa.ConnectionApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new IdeaStatiCa.ConnectionApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = IdeaStatiCa.ConnectionApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CalculationApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public CalculationApi(IdeaStatiCa.ConnectionApi.Client.ISynchronousClient client, IdeaStatiCa.ConnectionApi.Client.IAsynchronousClient asyncClient, IdeaStatiCa.ConnectionApi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = IdeaStatiCa.ConnectionApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public IdeaStatiCa.ConnectionApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public IdeaStatiCa.ConnectionApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IdeaStatiCa.ConnectionApi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IdeaStatiCa.ConnectionApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Run CBFEM caluclation and return the summary of the results 
        /// </summary>
        /// <exception cref="IdeaStatiCa.ConnectionApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The unique identifier of the opened project in the ConnectionRestApi service</param>
        /// <param name="conCalculationParameter">List of connections to calculate and a type of CBFEM analysis (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ConResultSummary&gt;</returns>
        public List<ConResultSummary> Calculate(Guid projectId, ConCalculationParameter conCalculationParameter = default(ConCalculationParameter), int operationIndex = 0)
        {
            IdeaStatiCa.ConnectionApi.Client.ApiResponse<List<ConResultSummary>> localVarResponse = CalculateWithHttpInfo(projectId, conCalculationParameter);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Run CBFEM caluclation and return the summary of the results 
        /// </summary>
        /// <exception cref="IdeaStatiCa.ConnectionApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The unique identifier of the opened project in the ConnectionRestApi service</param>
/// <param name="conCalculationParameter">List of connections to calculate and a type of CBFEM analysis (optional)</param>
        /// <param name="requestedType">Requested content type in the response.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ConResultSummary&gt;</returns>
        public IdeaStatiCa.ConnectionApi.Client.ApiResponse<List<ConResultSummary>> CalculateWithHttpInfo(Guid projectId, ConCalculationParameter conCalculationParameter = default(ConCalculationParameter), string requestedType = null, int operationIndex = 0)
        {
            IdeaStatiCa.ConnectionApi.Client.RequestOptions localVarRequestOptions = new IdeaStatiCa.ConnectionApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = IdeaStatiCa.ConnectionApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            string localVarAccept = requestedType;

            if(string.IsNullOrEmpty(localVarAccept))
            {
                localVarAccept = IdeaStatiCa.ConnectionApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
                if (localVarAccept != null)
                {
                    localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
                }
            }

            localVarRequestOptions.PathParameters.Add("projectId", IdeaStatiCa.ConnectionApi.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.Data = conCalculationParameter;

            localVarRequestOptions.Operation = "CalculationApi.Calculate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<List<ConResultSummary>>("/api/1/projects/{projectId}/connections/calculate", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Calculate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Run CBFEM caluclation and return the summary of the results 
        /// </summary>
        /// <exception cref="IdeaStatiCa.ConnectionApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The unique identifier of the opened project in the ConnectionRestApi service</param>
        /// <param name="conCalculationParameter">List of connections to calculate and a type of CBFEM analysis (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ConResultSummary&gt;</returns>
        public async System.Threading.Tasks.Task<List<ConResultSummary>> CalculateAsync(Guid projectId, ConCalculationParameter conCalculationParameter = default(ConCalculationParameter), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            IdeaStatiCa.ConnectionApi.Client.ApiResponse<List<ConResultSummary>> localVarResponse = await CalculateWithHttpInfoAsync(projectId, conCalculationParameter, null, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Run CBFEM caluclation and return the summary of the results 
        /// </summary>
        /// <exception cref="IdeaStatiCa.ConnectionApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The unique identifier of the opened project in the ConnectionRestApi service</param>
        /// <param name="conCalculationParameter">List of connections to calculate and a type of CBFEM analysis (optional)</param>
        /// <param name="requestedType">Requested content type in the response.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ConResultSummary&gt;)</returns>
        public async System.Threading.Tasks.Task<IdeaStatiCa.ConnectionApi.Client.ApiResponse<List<ConResultSummary>>> CalculateWithHttpInfoAsync(Guid projectId, ConCalculationParameter conCalculationParameter = default(ConCalculationParameter), string requestedType = null, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            IdeaStatiCa.ConnectionApi.Client.RequestOptions localVarRequestOptions = new IdeaStatiCa.ConnectionApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = IdeaStatiCa.ConnectionApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            string localVarAccept = requestedType;
            if(string.IsNullOrEmpty(localVarAccept))
            {
                localVarAccept = IdeaStatiCa.ConnectionApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            }

            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("projectId", IdeaStatiCa.ConnectionApi.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.Data = conCalculationParameter;

            localVarRequestOptions.Operation = "CalculationApi.Calculate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<List<ConResultSummary>>("/api/1/projects/{projectId}/connections/calculate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Calculate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get json string which represents raw CBFEM results (an instance of CheckResultsData) 
        /// </summary>
        /// <exception cref="IdeaStatiCa.ConnectionApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The unique identifier of the opened connection in the ConnectionRestApi service</param>
        /// <param name="conCalculationParameter">Type of requested analysis and connection to calculate (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> GetRawJsonResults(Guid projectId, ConCalculationParameter conCalculationParameter = default(ConCalculationParameter), int operationIndex = 0)
        {
            IdeaStatiCa.ConnectionApi.Client.ApiResponse<List<string>> localVarResponse = GetRawJsonResultsWithHttpInfo(projectId, conCalculationParameter);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get json string which represents raw CBFEM results (an instance of CheckResultsData) 
        /// </summary>
        /// <exception cref="IdeaStatiCa.ConnectionApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The unique identifier of the opened connection in the ConnectionRestApi service</param>
/// <param name="conCalculationParameter">Type of requested analysis and connection to calculate (optional)</param>
        /// <param name="requestedType">Requested content type in the response.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public IdeaStatiCa.ConnectionApi.Client.ApiResponse<List<string>> GetRawJsonResultsWithHttpInfo(Guid projectId, ConCalculationParameter conCalculationParameter = default(ConCalculationParameter), string requestedType = null, int operationIndex = 0)
        {
            IdeaStatiCa.ConnectionApi.Client.RequestOptions localVarRequestOptions = new IdeaStatiCa.ConnectionApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = IdeaStatiCa.ConnectionApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            string localVarAccept = requestedType;

            if(string.IsNullOrEmpty(localVarAccept))
            {
                localVarAccept = IdeaStatiCa.ConnectionApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
                if (localVarAccept != null)
                {
                    localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
                }
            }

            localVarRequestOptions.PathParameters.Add("projectId", IdeaStatiCa.ConnectionApi.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.Data = conCalculationParameter;

            localVarRequestOptions.Operation = "CalculationApi.GetRawJsonResults";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<List<string>>("/api/1/projects/{projectId}/connections/rawresults-text", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRawJsonResults", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get json string which represents raw CBFEM results (an instance of CheckResultsData) 
        /// </summary>
        /// <exception cref="IdeaStatiCa.ConnectionApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The unique identifier of the opened connection in the ConnectionRestApi service</param>
        /// <param name="conCalculationParameter">Type of requested analysis and connection to calculate (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> GetRawJsonResultsAsync(Guid projectId, ConCalculationParameter conCalculationParameter = default(ConCalculationParameter), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            IdeaStatiCa.ConnectionApi.Client.ApiResponse<List<string>> localVarResponse = await GetRawJsonResultsWithHttpInfoAsync(projectId, conCalculationParameter, null, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get json string which represents raw CBFEM results (an instance of CheckResultsData) 
        /// </summary>
        /// <exception cref="IdeaStatiCa.ConnectionApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The unique identifier of the opened connection in the ConnectionRestApi service</param>
        /// <param name="conCalculationParameter">Type of requested analysis and connection to calculate (optional)</param>
        /// <param name="requestedType">Requested content type in the response.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<IdeaStatiCa.ConnectionApi.Client.ApiResponse<List<string>>> GetRawJsonResultsWithHttpInfoAsync(Guid projectId, ConCalculationParameter conCalculationParameter = default(ConCalculationParameter), string requestedType = null, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            IdeaStatiCa.ConnectionApi.Client.RequestOptions localVarRequestOptions = new IdeaStatiCa.ConnectionApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = IdeaStatiCa.ConnectionApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            string localVarAccept = requestedType;
            if(string.IsNullOrEmpty(localVarAccept))
            {
                localVarAccept = IdeaStatiCa.ConnectionApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            }

            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("projectId", IdeaStatiCa.ConnectionApi.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.Data = conCalculationParameter;

            localVarRequestOptions.Operation = "CalculationApi.GetRawJsonResults";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<List<string>>("/api/1/projects/{projectId}/connections/rawresults-text", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRawJsonResults", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get detailed results of the CBFEM analysis 
        /// </summary>
        /// <exception cref="IdeaStatiCa.ConnectionApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The unique identifier of the opened project in the ConnectionRestApi service</param>
        /// <param name="conCalculationParameter">List of connections to calculate and a type of CBFEM analysis (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ConnectionCheckRes&gt;</returns>
        public List<ConnectionCheckRes> GetResults(Guid projectId, ConCalculationParameter conCalculationParameter = default(ConCalculationParameter), int operationIndex = 0)
        {
            IdeaStatiCa.ConnectionApi.Client.ApiResponse<List<ConnectionCheckRes>> localVarResponse = GetResultsWithHttpInfo(projectId, conCalculationParameter);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get detailed results of the CBFEM analysis 
        /// </summary>
        /// <exception cref="IdeaStatiCa.ConnectionApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The unique identifier of the opened project in the ConnectionRestApi service</param>
/// <param name="conCalculationParameter">List of connections to calculate and a type of CBFEM analysis (optional)</param>
        /// <param name="requestedType">Requested content type in the response.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ConnectionCheckRes&gt;</returns>
        public IdeaStatiCa.ConnectionApi.Client.ApiResponse<List<ConnectionCheckRes>> GetResultsWithHttpInfo(Guid projectId, ConCalculationParameter conCalculationParameter = default(ConCalculationParameter), string requestedType = null, int operationIndex = 0)
        {
            IdeaStatiCa.ConnectionApi.Client.RequestOptions localVarRequestOptions = new IdeaStatiCa.ConnectionApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = IdeaStatiCa.ConnectionApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            string localVarAccept = requestedType;

            if(string.IsNullOrEmpty(localVarAccept))
            {
                localVarAccept = IdeaStatiCa.ConnectionApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
                if (localVarAccept != null)
                {
                    localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
                }
            }

            localVarRequestOptions.PathParameters.Add("projectId", IdeaStatiCa.ConnectionApi.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.Data = conCalculationParameter;

            localVarRequestOptions.Operation = "CalculationApi.GetResults";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<List<ConnectionCheckRes>>("/api/1/projects/{projectId}/connections/results", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetResults", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get detailed results of the CBFEM analysis 
        /// </summary>
        /// <exception cref="IdeaStatiCa.ConnectionApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The unique identifier of the opened project in the ConnectionRestApi service</param>
        /// <param name="conCalculationParameter">List of connections to calculate and a type of CBFEM analysis (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ConnectionCheckRes&gt;</returns>
        public async System.Threading.Tasks.Task<List<ConnectionCheckRes>> GetResultsAsync(Guid projectId, ConCalculationParameter conCalculationParameter = default(ConCalculationParameter), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            IdeaStatiCa.ConnectionApi.Client.ApiResponse<List<ConnectionCheckRes>> localVarResponse = await GetResultsWithHttpInfoAsync(projectId, conCalculationParameter, null, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get detailed results of the CBFEM analysis 
        /// </summary>
        /// <exception cref="IdeaStatiCa.ConnectionApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The unique identifier of the opened project in the ConnectionRestApi service</param>
        /// <param name="conCalculationParameter">List of connections to calculate and a type of CBFEM analysis (optional)</param>
        /// <param name="requestedType">Requested content type in the response.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ConnectionCheckRes&gt;)</returns>
        public async System.Threading.Tasks.Task<IdeaStatiCa.ConnectionApi.Client.ApiResponse<List<ConnectionCheckRes>>> GetResultsWithHttpInfoAsync(Guid projectId, ConCalculationParameter conCalculationParameter = default(ConCalculationParameter), string requestedType = null, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            IdeaStatiCa.ConnectionApi.Client.RequestOptions localVarRequestOptions = new IdeaStatiCa.ConnectionApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = IdeaStatiCa.ConnectionApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            string localVarAccept = requestedType;
            if(string.IsNullOrEmpty(localVarAccept))
            {
                localVarAccept = IdeaStatiCa.ConnectionApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            }

            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("projectId", IdeaStatiCa.ConnectionApi.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.Data = conCalculationParameter;

            localVarRequestOptions.Operation = "CalculationApi.GetResults";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<List<ConnectionCheckRes>>("/api/1/projects/{projectId}/connections/results", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetResults", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
