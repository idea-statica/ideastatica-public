/*
 * Connection Rest API 1.0
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = IdeaStatiCa.ConnectionApi.Client.OpenAPIDateConverter;

namespace IdeaStatiCa.ConnectionApi.Model
{
    /// <summary>
    /// ParameterData
    /// </summary>
    [DataContract(Name = "ParameterData")]
    public partial class ParameterData : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets ValidationType
        /// </summary>
        [DataMember(Name = "validationType", EmitDefaultValue = false)]
        public ValidationType? ValidationType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ParameterData" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="identifier">identifier.</param>
        /// <param name="description">description.</param>
        /// <param name="parameterType">parameterType.</param>
        /// <param name="value">value.</param>
        /// <param name="defaultValue">defaultValue.</param>
        /// <param name="evaluatedValue">evaluatedValue.</param>
        /// <param name="evaluatedDefaultValue">evaluatedDefaultValue.</param>
        /// <param name="validationValue">validationValue.</param>
        /// <param name="evaluatedValidationValue">evaluatedValidationValue.</param>
        /// <param name="validationType">validationType.</param>
        /// <param name="userUnitId">userUnitId.</param>
        /// <param name="isVisibleForSimpleConnection">isVisibleForSimpleConnection.</param>
        public ParameterData(int id = default(int), string identifier = default(string), string description = default(string), string parameterType = default(string), Object value = default(Object), Object defaultValue = default(Object), Object evaluatedValue = default(Object), Object evaluatedDefaultValue = default(Object), string validationValue = default(string), string evaluatedValidationValue = default(string), ValidationType? validationType = default(ValidationType?), int userUnitId = default(int), bool isVisibleForSimpleConnection = default(bool))
        {
            this.Id = id;
            this.Identifier = identifier;
            this.Description = description;
            this.ParameterType = parameterType;
            this.Value = value;
            this.DefaultValue = defaultValue;
            this.EvaluatedValue = evaluatedValue;
            this.EvaluatedDefaultValue = evaluatedDefaultValue;
            this.ValidationValue = validationValue;
            this.EvaluatedValidationValue = evaluatedValidationValue;
            this.ValidationType = validationType;
            this.UserUnitId = userUnitId;
            this.IsVisibleForSimpleConnection = isVisibleForSimpleConnection;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets Identifier
        /// </summary>
        [DataMember(Name = "identifier", EmitDefaultValue = true)]
        public string Identifier { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets ParameterType
        /// </summary>
        [DataMember(Name = "parameterType", EmitDefaultValue = true)]
        public string ParameterType { get; set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name = "value", EmitDefaultValue = true)]
        public Object Value { get; set; }

        /// <summary>
        /// Gets or Sets DefaultValue
        /// </summary>
        [DataMember(Name = "defaultValue", EmitDefaultValue = true)]
        public Object DefaultValue { get; set; }

        /// <summary>
        /// Gets or Sets EvaluatedValue
        /// </summary>
        [DataMember(Name = "evaluatedValue", EmitDefaultValue = true)]
        public Object EvaluatedValue { get; set; }

        /// <summary>
        /// Gets or Sets EvaluatedDefaultValue
        /// </summary>
        [DataMember(Name = "evaluatedDefaultValue", EmitDefaultValue = true)]
        public Object EvaluatedDefaultValue { get; set; }

        /// <summary>
        /// Gets or Sets ValidationValue
        /// </summary>
        [DataMember(Name = "validationValue", EmitDefaultValue = true)]
        public string ValidationValue { get; set; }

        /// <summary>
        /// Gets or Sets EvaluatedValidationValue
        /// </summary>
        [DataMember(Name = "evaluatedValidationValue", EmitDefaultValue = true)]
        public string EvaluatedValidationValue { get; set; }

        /// <summary>
        /// Gets or Sets UserUnitId
        /// </summary>
        [DataMember(Name = "userUnitId", EmitDefaultValue = false)]
        public int UserUnitId { get; set; }

        /// <summary>
        /// Gets or Sets IsVisibleForSimpleConnection
        /// </summary>
        [DataMember(Name = "isVisibleForSimpleConnection", EmitDefaultValue = true)]
        public bool IsVisibleForSimpleConnection { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ParameterData {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Identifier: ").Append(Identifier).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ParameterType: ").Append(ParameterType).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  DefaultValue: ").Append(DefaultValue).Append("\n");
            sb.Append("  EvaluatedValue: ").Append(EvaluatedValue).Append("\n");
            sb.Append("  EvaluatedDefaultValue: ").Append(EvaluatedDefaultValue).Append("\n");
            sb.Append("  ValidationValue: ").Append(ValidationValue).Append("\n");
            sb.Append("  EvaluatedValidationValue: ").Append(EvaluatedValidationValue).Append("\n");
            sb.Append("  ValidationType: ").Append(ValidationType).Append("\n");
            sb.Append("  UserUnitId: ").Append(UserUnitId).Append("\n");
            sb.Append("  IsVisibleForSimpleConnection: ").Append(IsVisibleForSimpleConnection).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
