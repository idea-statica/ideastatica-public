/*
 * Connection Rest API 1.0
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = IdeaStatiCa.ConnectionApi.Client.OpenAPIDateConverter;

namespace IdeaStatiCa.ConnectionApi.Model
{
    /// <summary>
    /// IdeaParameter
    /// </summary>
    [DataContract(Name = "IdeaParameter")]
    public partial class IdeaParameter : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IdeaParameter" /> class.
        /// </summary>
        /// <param name="key">key.</param>
        /// <param name="expression">expression.</param>
        /// <param name="value">value.</param>
        /// <param name="unit">unit.</param>
        /// <param name="parameterType">parameterType.</param>
        /// <param name="validationExpression">validationExpression.</param>
        /// <param name="description">description.</param>
        /// <param name="validationStatus">validationStatus.</param>
        /// <param name="isVisible">isVisible.</param>
        public IdeaParameter(string key = default(string), string expression = default(string), Object value = default(Object), string unit = default(string), string parameterType = default(string), string validationExpression = default(string), string description = default(string), string validationStatus = default(string), bool? isVisible = default(bool?))
        {
            this.Key = key;
            this.Expression = expression;
            this.Value = value;
            this.Unit = unit;
            this.ParameterType = parameterType;
            this.ValidationExpression = validationExpression;
            this.Description = description;
            this.ValidationStatus = validationStatus;
            this.IsVisible = isVisible;
        }

        /// <summary>
        /// Gets or Sets Key
        /// </summary>
        [DataMember(Name = "key", EmitDefaultValue = true)]
        public string Key { get; set; }

        /// <summary>
        /// Gets or Sets Expression
        /// </summary>
        [DataMember(Name = "expression", EmitDefaultValue = true)]
        public string Expression { get; set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name = "value", EmitDefaultValue = true)]
        public Object Value { get; set; }

        /// <summary>
        /// Gets or Sets Unit
        /// </summary>
        [DataMember(Name = "unit", EmitDefaultValue = true)]
        public string Unit { get; set; }

        /// <summary>
        /// Gets or Sets ParameterType
        /// </summary>
        [DataMember(Name = "parameterType", EmitDefaultValue = true)]
        public string ParameterType { get; set; }

        /// <summary>
        /// Gets or Sets ValidationExpression
        /// </summary>
        [DataMember(Name = "validationExpression", EmitDefaultValue = true)]
        public string ValidationExpression { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets ValidationStatus
        /// </summary>
        [DataMember(Name = "validationStatus", EmitDefaultValue = true)]
        public string ValidationStatus { get; set; }

        /// <summary>
        /// Gets or Sets IsVisible
        /// </summary>
        [DataMember(Name = "isVisible", EmitDefaultValue = true)]
        public bool? IsVisible { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IdeaParameter {\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Expression: ").Append(Expression).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Unit: ").Append(Unit).Append("\n");
            sb.Append("  ParameterType: ").Append(ParameterType).Append("\n");
            sb.Append("  ValidationExpression: ").Append(ValidationExpression).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ValidationStatus: ").Append(ValidationStatus).Append("\n");
            sb.Append("  IsVisible: ").Append(IsVisible).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
