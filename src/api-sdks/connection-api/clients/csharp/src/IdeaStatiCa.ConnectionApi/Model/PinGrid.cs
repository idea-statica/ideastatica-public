/*
 * Connection Rest API 1.0
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = IdeaStatiCa.ConnectionApi.Client.OpenAPIDateConverter;

namespace IdeaStatiCa.ConnectionApi.Model
{
    /// <summary>
    /// Data of the pin grid
    /// </summary>
    [DataContract(Name = "PinGrid")]
    public partial class PinGrid : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PinGrid" /> class.
        /// </summary>
        /// <param name="isReplaceable">Replaceable pin.</param>
        /// <param name="pin">pin.</param>
        /// <param name="origin">origin.</param>
        /// <param name="axisX">axisX.</param>
        /// <param name="axisY">axisY.</param>
        /// <param name="axisZ">axisZ.</param>
        /// <param name="positions">Positions of holes in the local coordinate system of the grid.</param>
        /// <param name="connectedParts">List of the connected parts.</param>
        /// <param name="name">Name.</param>
        /// <param name="length">Length.</param>
        /// <param name="id">Element Id.</param>
        public PinGrid(bool isReplaceable = default(bool), ReferenceElement pin = default(ReferenceElement), Point3D origin = default(Point3D), Vector3D axisX = default(Vector3D), Vector3D axisY = default(Vector3D), Vector3D axisZ = default(Vector3D), List<Point3D> positions = default(List<Point3D>), List<ReferenceElement> connectedParts = default(List<ReferenceElement>), string name = default(string), double length = default(double), int id = default(int))
        {
            this.IsReplaceable = isReplaceable;
            this.Pin = pin;
            this.Origin = origin;
            this.AxisX = axisX;
            this.AxisY = axisY;
            this.AxisZ = axisZ;
            this.Positions = positions;
            this.ConnectedParts = connectedParts;
            this.Name = name;
            this.Length = length;
            this.Id = id;
        }

        /// <summary>
        /// Replaceable pin
        /// </summary>
        /// <value>Replaceable pin</value>
        [DataMember(Name = "isReplaceable", EmitDefaultValue = true)]
        public bool IsReplaceable { get; set; }

        /// <summary>
        /// Gets or Sets Pin
        /// </summary>
        [DataMember(Name = "pin", EmitDefaultValue = false)]
        public ReferenceElement Pin { get; set; }

        /// <summary>
        /// Gets or Sets Origin
        /// </summary>
        [DataMember(Name = "origin", EmitDefaultValue = false)]
        public Point3D Origin { get; set; }

        /// <summary>
        /// Gets or Sets AxisX
        /// </summary>
        [DataMember(Name = "axisX", EmitDefaultValue = false)]
        public Vector3D AxisX { get; set; }

        /// <summary>
        /// Gets or Sets AxisY
        /// </summary>
        [DataMember(Name = "axisY", EmitDefaultValue = false)]
        public Vector3D AxisY { get; set; }

        /// <summary>
        /// Gets or Sets AxisZ
        /// </summary>
        [DataMember(Name = "axisZ", EmitDefaultValue = false)]
        public Vector3D AxisZ { get; set; }

        /// <summary>
        /// Positions of holes in the local coordinate system of the grid
        /// </summary>
        /// <value>Positions of holes in the local coordinate system of the grid</value>
        [DataMember(Name = "positions", EmitDefaultValue = true)]
        public List<Point3D> Positions { get; set; }

        /// <summary>
        /// List of the connected parts
        /// </summary>
        /// <value>List of the connected parts</value>
        [DataMember(Name = "connectedParts", EmitDefaultValue = true)]
        public List<ReferenceElement> ConnectedParts { get; set; }

        /// <summary>
        /// Name
        /// </summary>
        /// <value>Name</value>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Length
        /// </summary>
        /// <value>Length</value>
        [DataMember(Name = "length", EmitDefaultValue = false)]
        public double Length { get; set; }

        /// <summary>
        /// Element Id
        /// </summary>
        /// <value>Element Id</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PinGrid {\n");
            sb.Append("  IsReplaceable: ").Append(IsReplaceable).Append("\n");
            sb.Append("  Pin: ").Append(Pin).Append("\n");
            sb.Append("  Origin: ").Append(Origin).Append("\n");
            sb.Append("  AxisX: ").Append(AxisX).Append("\n");
            sb.Append("  AxisY: ").Append(AxisY).Append("\n");
            sb.Append("  AxisZ: ").Append(AxisZ).Append("\n");
            sb.Append("  Positions: ").Append(Positions).Append("\n");
            sb.Append("  ConnectedParts: ").Append(ConnectedParts).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Length: ").Append(Length).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
