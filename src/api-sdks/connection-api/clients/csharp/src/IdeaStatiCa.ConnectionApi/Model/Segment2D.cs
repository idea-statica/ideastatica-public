/*
 * Connection Rest API 1.0
 *
 * IDEA StatiCa Connection API, used for the automated design and calculation of steel connections.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: info@ideastatica.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = IdeaStatiCa.ConnectionApi.Client.OpenAPIDateConverter;

namespace IdeaStatiCa.ConnectionApi.Model
{
    /// <summary>
    /// Represents a segment in two-dimensional space.
    /// </summary>
    [DataContract(Name = "Segment2D")]
    public partial class Segment2D
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Segment2D" /> class.
        /// </summary>
        /// <param name="endPoint">endPoint.</param>
        public Segment2D(Point2D endPoint = default(Point2D))
        {
            this.EndPoint = endPoint;
        }

        /// <summary>
        /// Gets or Sets EndPoint
        /// </summary>
        [DataMember(Name = "endPoint", EmitDefaultValue = false)]
        public Point2D EndPoint { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Segment2D {\n");
            sb.Append("  EndPoint: ").Append(EndPoint).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
