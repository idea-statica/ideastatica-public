/*
 * Connection Rest API 1.0
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = IdeaStatiCa.ConnectionApi.Client.OpenAPIDateConverter;

namespace IdeaStatiCa.ConnectionApi.Model
{
    /// <summary>
    /// Data of the bolt grid
    /// </summary>
    [DataContract(Name = "BoltGrid")]
    public partial class BoltGrid : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets BoltInteraction
        /// </summary>
        [DataMember(Name = "boltInteraction", EmitDefaultValue = false)]
        public BoltShearType? BoltInteraction { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="BoltGrid" /> class.
        /// </summary>
        /// <param name="boltAssemblyRef">boltAssemblyRef.</param>
        /// <param name="id">Unique Id of the bolt grid.</param>
        /// <param name="isAnchor">Is Anchor.</param>
        /// <param name="anchorLen">Anchor lenght.</param>
        /// <param name="holeDiameter">The diameter of the hole.</param>
        /// <param name="diameter">The diameter of bolt.</param>
        /// <param name="headDiameter">The head diameter of bolt.</param>
        /// <param name="diagonalHeadDiameter">The Diagonal Head Diameter of bolt.</param>
        /// <param name="headHeight">The Head Height of bolt.</param>
        /// <param name="boreHole">The BoreHole of bolt.</param>
        /// <param name="tensileStressArea">The Tensile Stress Area of bolt.</param>
        /// <param name="nutThickness">The Nut Thickness of bolt.</param>
        /// <param name="boltAssemblyName">The description of the bolt assembly.</param>
        /// <param name="standard">The standard of the bolt assembly.</param>
        /// <param name="material">The material of the bolt assembly.</param>
        /// <param name="origin">origin.</param>
        /// <param name="axisX">axisX.</param>
        /// <param name="axisY">axisY.</param>
        /// <param name="axisZ">axisZ.</param>
        /// <param name="positions">Positions of holes in the local coodinate system of the bolt grid.</param>
        /// <param name="connectedPlates">Identifiers of the connected plates.</param>
        /// <param name="connectedPartIds">Id of the weld.</param>
        /// <param name="shearInThread">Indicates, whether a shear plane is in the thread of a bolt..</param>
        /// <param name="boltInteraction">boltInteraction.</param>
        public BoltGrid(string boltAssemblyRef = default(string), int id = default(int), bool isAnchor = default(bool), double anchorLen = default(double), double holeDiameter = default(double), double diameter = default(double), double headDiameter = default(double), double diagonalHeadDiameter = default(double), double headHeight = default(double), double boreHole = default(double), double tensileStressArea = default(double), double nutThickness = default(double), string boltAssemblyName = default(string), string standard = default(string), string material = default(string), Point3D origin = default(Point3D), Vector3D axisX = default(Vector3D), Vector3D axisY = default(Vector3D), Vector3D axisZ = default(Vector3D), List<Point3D> positions = default(List<Point3D>), List<int> connectedPlates = default(List<int>), List<string> connectedPartIds = default(List<string>), bool shearInThread = default(bool), BoltShearType? boltInteraction = default(BoltShearType?))
        {
            this.BoltAssemblyRef = boltAssemblyRef;
            this.Id = id;
            this.IsAnchor = isAnchor;
            this.AnchorLen = anchorLen;
            this.HoleDiameter = holeDiameter;
            this.Diameter = diameter;
            this.HeadDiameter = headDiameter;
            this.DiagonalHeadDiameter = diagonalHeadDiameter;
            this.HeadHeight = headHeight;
            this.BoreHole = boreHole;
            this.TensileStressArea = tensileStressArea;
            this.NutThickness = nutThickness;
            this.BoltAssemblyName = boltAssemblyName;
            this.Standard = standard;
            this.Material = material;
            this.Origin = origin;
            this.AxisX = axisX;
            this.AxisY = axisY;
            this.AxisZ = axisZ;
            this.Positions = positions;
            this.ConnectedPlates = connectedPlates;
            this.ConnectedPartIds = connectedPartIds;
            this.ShearInThread = shearInThread;
            this.BoltInteraction = boltInteraction;
        }

        /// <summary>
        /// Gets or Sets BoltAssemblyRef
        /// </summary>
        [DataMember(Name = "boltAssemblyRef", EmitDefaultValue = true)]
        public string BoltAssemblyRef { get; set; }

        /// <summary>
        /// Unique Id of the bolt grid
        /// </summary>
        /// <value>Unique Id of the bolt grid</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Is Anchor
        /// </summary>
        /// <value>Is Anchor</value>
        [DataMember(Name = "isAnchor", EmitDefaultValue = true)]
        public bool IsAnchor { get; set; }

        /// <summary>
        /// Anchor lenght
        /// </summary>
        /// <value>Anchor lenght</value>
        [DataMember(Name = "anchorLen", EmitDefaultValue = false)]
        public double AnchorLen { get; set; }

        /// <summary>
        /// The diameter of the hole
        /// </summary>
        /// <value>The diameter of the hole</value>
        [DataMember(Name = "holeDiameter", EmitDefaultValue = false)]
        public double HoleDiameter { get; set; }

        /// <summary>
        /// The diameter of bolt
        /// </summary>
        /// <value>The diameter of bolt</value>
        [DataMember(Name = "diameter", EmitDefaultValue = false)]
        public double Diameter { get; set; }

        /// <summary>
        /// The head diameter of bolt
        /// </summary>
        /// <value>The head diameter of bolt</value>
        [DataMember(Name = "headDiameter", EmitDefaultValue = false)]
        public double HeadDiameter { get; set; }

        /// <summary>
        /// The Diagonal Head Diameter of bolt
        /// </summary>
        /// <value>The Diagonal Head Diameter of bolt</value>
        [DataMember(Name = "diagonalHeadDiameter", EmitDefaultValue = false)]
        public double DiagonalHeadDiameter { get; set; }

        /// <summary>
        /// The Head Height of bolt
        /// </summary>
        /// <value>The Head Height of bolt</value>
        [DataMember(Name = "headHeight", EmitDefaultValue = false)]
        public double HeadHeight { get; set; }

        /// <summary>
        /// The BoreHole of bolt
        /// </summary>
        /// <value>The BoreHole of bolt</value>
        [DataMember(Name = "boreHole", EmitDefaultValue = false)]
        public double BoreHole { get; set; }

        /// <summary>
        /// The Tensile Stress Area of bolt
        /// </summary>
        /// <value>The Tensile Stress Area of bolt</value>
        [DataMember(Name = "tensileStressArea", EmitDefaultValue = false)]
        public double TensileStressArea { get; set; }

        /// <summary>
        /// The Nut Thickness of bolt
        /// </summary>
        /// <value>The Nut Thickness of bolt</value>
        [DataMember(Name = "nutThickness", EmitDefaultValue = false)]
        public double NutThickness { get; set; }

        /// <summary>
        /// The description of the bolt assembly
        /// </summary>
        /// <value>The description of the bolt assembly</value>
        [DataMember(Name = "boltAssemblyName", EmitDefaultValue = true)]
        public string BoltAssemblyName { get; set; }

        /// <summary>
        /// The standard of the bolt assembly
        /// </summary>
        /// <value>The standard of the bolt assembly</value>
        [DataMember(Name = "standard", EmitDefaultValue = true)]
        public string Standard { get; set; }

        /// <summary>
        /// The material of the bolt assembly
        /// </summary>
        /// <value>The material of the bolt assembly</value>
        [DataMember(Name = "material", EmitDefaultValue = true)]
        public string Material { get; set; }

        /// <summary>
        /// Gets or Sets Origin
        /// </summary>
        [DataMember(Name = "origin", EmitDefaultValue = false)]
        public Point3D Origin { get; set; }

        /// <summary>
        /// Gets or Sets AxisX
        /// </summary>
        [DataMember(Name = "axisX", EmitDefaultValue = false)]
        public Vector3D AxisX { get; set; }

        /// <summary>
        /// Gets or Sets AxisY
        /// </summary>
        [DataMember(Name = "axisY", EmitDefaultValue = false)]
        public Vector3D AxisY { get; set; }

        /// <summary>
        /// Gets or Sets AxisZ
        /// </summary>
        [DataMember(Name = "axisZ", EmitDefaultValue = false)]
        public Vector3D AxisZ { get; set; }

        /// <summary>
        /// Positions of holes in the local coodinate system of the bolt grid
        /// </summary>
        /// <value>Positions of holes in the local coodinate system of the bolt grid</value>
        [DataMember(Name = "positions", EmitDefaultValue = true)]
        public List<Point3D> Positions { get; set; }

        /// <summary>
        /// Identifiers of the connected plates
        /// </summary>
        /// <value>Identifiers of the connected plates</value>
        [DataMember(Name = "connectedPlates", EmitDefaultValue = true)]
        public List<int> ConnectedPlates { get; set; }

        /// <summary>
        /// Id of the weld
        /// </summary>
        /// <value>Id of the weld</value>
        [DataMember(Name = "connectedPartIds", EmitDefaultValue = true)]
        public List<string> ConnectedPartIds { get; set; }

        /// <summary>
        /// Indicates, whether a shear plane is in the thread of a bolt.
        /// </summary>
        /// <value>Indicates, whether a shear plane is in the thread of a bolt.</value>
        [DataMember(Name = "shearInThread", EmitDefaultValue = true)]
        public bool ShearInThread { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BoltGrid {\n");
            sb.Append("  BoltAssemblyRef: ").Append(BoltAssemblyRef).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsAnchor: ").Append(IsAnchor).Append("\n");
            sb.Append("  AnchorLen: ").Append(AnchorLen).Append("\n");
            sb.Append("  HoleDiameter: ").Append(HoleDiameter).Append("\n");
            sb.Append("  Diameter: ").Append(Diameter).Append("\n");
            sb.Append("  HeadDiameter: ").Append(HeadDiameter).Append("\n");
            sb.Append("  DiagonalHeadDiameter: ").Append(DiagonalHeadDiameter).Append("\n");
            sb.Append("  HeadHeight: ").Append(HeadHeight).Append("\n");
            sb.Append("  BoreHole: ").Append(BoreHole).Append("\n");
            sb.Append("  TensileStressArea: ").Append(TensileStressArea).Append("\n");
            sb.Append("  NutThickness: ").Append(NutThickness).Append("\n");
            sb.Append("  BoltAssemblyName: ").Append(BoltAssemblyName).Append("\n");
            sb.Append("  Standard: ").Append(Standard).Append("\n");
            sb.Append("  Material: ").Append(Material).Append("\n");
            sb.Append("  Origin: ").Append(Origin).Append("\n");
            sb.Append("  AxisX: ").Append(AxisX).Append("\n");
            sb.Append("  AxisY: ").Append(AxisY).Append("\n");
            sb.Append("  AxisZ: ").Append(AxisZ).Append("\n");
            sb.Append("  Positions: ").Append(Positions).Append("\n");
            sb.Append("  ConnectedPlates: ").Append(ConnectedPlates).Append("\n");
            sb.Append("  ConnectedPartIds: ").Append(ConnectedPartIds).Append("\n");
            sb.Append("  ShearInThread: ").Append(ShearInThread).Append("\n");
            sb.Append("  BoltInteraction: ").Append(BoltInteraction).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
