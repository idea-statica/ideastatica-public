/*
 * Connection Rest API 1.0
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = IdeaStatiCa.ConnectionApi.Client.OpenAPIDateConverter;

namespace IdeaStatiCa.ConnectionApi.Model
{
    /// <summary>
    /// Provides data of bend
    /// </summary>
    [DataContract(Name = "BendData")]
    public partial class BendData : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BendData" /> class.
        /// </summary>
        /// <param name="plate1Id">First plate.</param>
        /// <param name="plate2Id">Second plate.</param>
        /// <param name="radius">Radius of bend.</param>
        /// <param name="point1OfSideBoundary1">point1OfSideBoundary1.</param>
        /// <param name="point2OfSideBoundary1">point2OfSideBoundary1.</param>
        /// <param name="endFaceNormal1">endFaceNormal1.</param>
        /// <param name="point1OfSideBoundary2">point1OfSideBoundary2.</param>
        /// <param name="point2OfSideBoundary2">point2OfSideBoundary2.</param>
        public BendData(int plate1Id = default(int), int plate2Id = default(int), double radius = default(double), Point3D point1OfSideBoundary1 = default(Point3D), Point3D point2OfSideBoundary1 = default(Point3D), Vector3D endFaceNormal1 = default(Vector3D), Point3D point1OfSideBoundary2 = default(Point3D), Point3D point2OfSideBoundary2 = default(Point3D))
        {
            this.Plate1Id = plate1Id;
            this.Plate2Id = plate2Id;
            this.Radius = radius;
            this.Point1OfSideBoundary1 = point1OfSideBoundary1;
            this.Point2OfSideBoundary1 = point2OfSideBoundary1;
            this.EndFaceNormal1 = endFaceNormal1;
            this.Point1OfSideBoundary2 = point1OfSideBoundary2;
            this.Point2OfSideBoundary2 = point2OfSideBoundary2;
        }

        /// <summary>
        /// First plate
        /// </summary>
        /// <value>First plate</value>
        [DataMember(Name = "plate1Id", EmitDefaultValue = false)]
        public int Plate1Id { get; set; }

        /// <summary>
        /// Second plate
        /// </summary>
        /// <value>Second plate</value>
        [DataMember(Name = "plate2Id", EmitDefaultValue = false)]
        public int Plate2Id { get; set; }

        /// <summary>
        /// Radius of bend
        /// </summary>
        /// <value>Radius of bend</value>
        [DataMember(Name = "radius", EmitDefaultValue = false)]
        public double Radius { get; set; }

        /// <summary>
        /// Gets or Sets Point1OfSideBoundary1
        /// </summary>
        [DataMember(Name = "point1OfSideBoundary1", EmitDefaultValue = false)]
        public Point3D Point1OfSideBoundary1 { get; set; }

        /// <summary>
        /// Gets or Sets Point2OfSideBoundary1
        /// </summary>
        [DataMember(Name = "point2OfSideBoundary1", EmitDefaultValue = false)]
        public Point3D Point2OfSideBoundary1 { get; set; }

        /// <summary>
        /// Gets or Sets EndFaceNormal1
        /// </summary>
        [DataMember(Name = "endFaceNormal1", EmitDefaultValue = false)]
        public Vector3D EndFaceNormal1 { get; set; }

        /// <summary>
        /// Gets or Sets Point1OfSideBoundary2
        /// </summary>
        [DataMember(Name = "point1OfSideBoundary2", EmitDefaultValue = false)]
        public Point3D Point1OfSideBoundary2 { get; set; }

        /// <summary>
        /// Gets or Sets Point2OfSideBoundary2
        /// </summary>
        [DataMember(Name = "point2OfSideBoundary2", EmitDefaultValue = false)]
        public Point3D Point2OfSideBoundary2 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BendData {\n");
            sb.Append("  Plate1Id: ").Append(Plate1Id).Append("\n");
            sb.Append("  Plate2Id: ").Append(Plate2Id).Append("\n");
            sb.Append("  Radius: ").Append(Radius).Append("\n");
            sb.Append("  Point1OfSideBoundary1: ").Append(Point1OfSideBoundary1).Append("\n");
            sb.Append("  Point2OfSideBoundary1: ").Append(Point2OfSideBoundary1).Append("\n");
            sb.Append("  EndFaceNormal1: ").Append(EndFaceNormal1).Append("\n");
            sb.Append("  Point1OfSideBoundary2: ").Append(Point1OfSideBoundary2).Append("\n");
            sb.Append("  Point2OfSideBoundary2: ").Append(Point2OfSideBoundary2).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
