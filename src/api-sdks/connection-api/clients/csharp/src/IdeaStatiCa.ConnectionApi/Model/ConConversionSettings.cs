/*
 * Connection Rest API 1.0
 *
 * IDEA StatiCa Connection API, used for the automated design and calculation of steel connections.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: info@ideastatica.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = IdeaStatiCa.ConnectionApi.Client.OpenAPIDateConverter;

namespace IdeaStatiCa.ConnectionApi.Model
{
    /// <summary>
    /// ConConversionSettings
    /// </summary>
    [DataContract(Name = "ConConversionSettings")]
    public partial class ConConversionSettings
    {

        /// <summary>
        /// Gets or Sets TargetDesignCode
        /// </summary>
        [DataMember(Name = "targetDesignCode", EmitDefaultValue = false)]
        public CountryCode? TargetDesignCode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ConConversionSettings" /> class.
        /// </summary>
        /// <param name="targetDesignCode">targetDesignCode.</param>
        /// <param name="concrete">concrete.</param>
        /// <param name="crossSections">crossSections.</param>
        /// <param name="fasteners">fasteners.</param>
        /// <param name="steel">steel.</param>
        /// <param name="welds">welds.</param>
        /// <param name="boltGrade">boltGrade.</param>
        public ConConversionSettings(CountryCode? targetDesignCode = default(CountryCode?), List<ConversionMapping> concrete = default(List<ConversionMapping>), List<ConversionMapping> crossSections = default(List<ConversionMapping>), List<ConversionMapping> fasteners = default(List<ConversionMapping>), List<ConversionMapping> steel = default(List<ConversionMapping>), List<ConversionMapping> welds = default(List<ConversionMapping>), List<ConversionMapping> boltGrade = default(List<ConversionMapping>))
        {
            this.TargetDesignCode = targetDesignCode;
            this.Concrete = concrete;
            this.CrossSections = crossSections;
            this.Fasteners = fasteners;
            this.Steel = steel;
            this.Welds = welds;
            this.BoltGrade = boltGrade;
        }

        /// <summary>
        /// Gets or Sets Concrete
        /// </summary>
        [DataMember(Name = "concrete", EmitDefaultValue = true)]
        public List<ConversionMapping> Concrete { get; set; }

        /// <summary>
        /// Gets or Sets CrossSections
        /// </summary>
        [DataMember(Name = "crossSections", EmitDefaultValue = true)]
        public List<ConversionMapping> CrossSections { get; set; }

        /// <summary>
        /// Gets or Sets Fasteners
        /// </summary>
        [DataMember(Name = "fasteners", EmitDefaultValue = true)]
        public List<ConversionMapping> Fasteners { get; set; }

        /// <summary>
        /// Gets or Sets Steel
        /// </summary>
        [DataMember(Name = "steel", EmitDefaultValue = true)]
        public List<ConversionMapping> Steel { get; set; }

        /// <summary>
        /// Gets or Sets Welds
        /// </summary>
        [DataMember(Name = "welds", EmitDefaultValue = true)]
        public List<ConversionMapping> Welds { get; set; }

        /// <summary>
        /// Gets or Sets BoltGrade
        /// </summary>
        [DataMember(Name = "boltGrade", EmitDefaultValue = true)]
        public List<ConversionMapping> BoltGrade { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ConConversionSettings {\n");
            sb.Append("  TargetDesignCode: ").Append(TargetDesignCode).Append("\n");
            sb.Append("  Concrete: ").Append(Concrete).Append("\n");
            sb.Append("  CrossSections: ").Append(CrossSections).Append("\n");
            sb.Append("  Fasteners: ").Append(Fasteners).Append("\n");
            sb.Append("  Steel: ").Append(Steel).Append("\n");
            sb.Append("  Welds: ").Append(Welds).Append("\n");
            sb.Append("  BoltGrade: ").Append(BoltGrade).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
