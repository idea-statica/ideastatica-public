/*
 * Connection Rest API 1.0
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = IdeaStatiCa.ConnectionApi.Client.OpenAPIDateConverter;

namespace IdeaStatiCa.ConnectionApi.Model
{
    /// <summary>
    /// Provides data of the cut objec by object
    /// </summary>
    [DataContract(Name = "CutBeamByBeamData")]
    public partial class CutBeamByBeamData : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets WeldType
        /// </summary>
        [DataMember(Name = "weldType", EmitDefaultValue = false)]
        public WeldType? WeldType { get; set; }

        /// <summary>
        /// Gets or Sets Method
        /// </summary>
        [DataMember(Name = "method", EmitDefaultValue = false)]
        public CutMethod? Method { get; set; }

        /// <summary>
        /// Gets or Sets Orientation
        /// </summary>
        [DataMember(Name = "orientation", EmitDefaultValue = false)]
        public CutOrientation? Orientation { get; set; }

        /// <summary>
        /// Gets or Sets PlaneOnCuttingObject
        /// </summary>
        [DataMember(Name = "planeOnCuttingObject", EmitDefaultValue = false)]
        public DistanceComparison? PlaneOnCuttingObject { get; set; }

        /// <summary>
        /// Gets or Sets CutPart
        /// </summary>
        [DataMember(Name = "cutPart", EmitDefaultValue = false)]
        public CutPart? CutPart { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CutBeamByBeamData" /> class.
        /// </summary>
        /// <param name="name">Name of the cut.</param>
        /// <param name="modifiedObject">modifiedObject.</param>
        /// <param name="cuttingObject">cuttingObject.</param>
        /// <param name="isWeld">is cut welded.</param>
        /// <param name="weldThickness">Thickness of the weld - value 0 &#x3D; recommended size.</param>
        /// <param name="weldType">weldType.</param>
        /// <param name="offset">Offset.</param>
        /// <param name="method">method.</param>
        /// <param name="orientation">orientation.</param>
        /// <param name="planeOnCuttingObject">planeOnCuttingObject.</param>
        /// <param name="cutPart">cutPart.</param>
        /// <param name="extendBeforeCut">Extend before cut - for cuts where user can decide if modified beam will be extended or not.</param>
        public CutBeamByBeamData(string name = default(string), ReferenceElement modifiedObject = default(ReferenceElement), ReferenceElement cuttingObject = default(ReferenceElement), bool isWeld = default(bool), double weldThickness = default(double), WeldType? weldType = default(WeldType?), double offset = default(double), CutMethod? method = default(CutMethod?), CutOrientation? orientation = default(CutOrientation?), DistanceComparison? planeOnCuttingObject = default(DistanceComparison?), CutPart? cutPart = default(CutPart?), bool extendBeforeCut = default(bool))
        {
            this.Name = name;
            this.ModifiedObject = modifiedObject;
            this.CuttingObject = cuttingObject;
            this.IsWeld = isWeld;
            this.WeldThickness = weldThickness;
            this.WeldType = weldType;
            this.Offset = offset;
            this.Method = method;
            this.Orientation = orientation;
            this.PlaneOnCuttingObject = planeOnCuttingObject;
            this.CutPart = cutPart;
            this.ExtendBeforeCut = extendBeforeCut;
        }

        /// <summary>
        /// Name of the cut
        /// </summary>
        /// <value>Name of the cut</value>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets ModifiedObject
        /// </summary>
        [DataMember(Name = "modifiedObject", EmitDefaultValue = false)]
        public ReferenceElement ModifiedObject { get; set; }

        /// <summary>
        /// Gets or Sets CuttingObject
        /// </summary>
        [DataMember(Name = "cuttingObject", EmitDefaultValue = false)]
        public ReferenceElement CuttingObject { get; set; }

        /// <summary>
        /// is cut welded
        /// </summary>
        /// <value>is cut welded</value>
        [DataMember(Name = "isWeld", EmitDefaultValue = true)]
        public bool IsWeld { get; set; }

        /// <summary>
        /// Thickness of the weld - value 0 &#x3D; recommended size
        /// </summary>
        /// <value>Thickness of the weld - value 0 &#x3D; recommended size</value>
        [DataMember(Name = "weldThickness", EmitDefaultValue = false)]
        public double WeldThickness { get; set; }

        /// <summary>
        /// Offset
        /// </summary>
        /// <value>Offset</value>
        [DataMember(Name = "offset", EmitDefaultValue = false)]
        public double Offset { get; set; }

        /// <summary>
        /// Extend before cut - for cuts where user can decide if modified beam will be extended or not
        /// </summary>
        /// <value>Extend before cut - for cuts where user can decide if modified beam will be extended or not</value>
        [DataMember(Name = "extendBeforeCut", EmitDefaultValue = true)]
        public bool ExtendBeforeCut { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CutBeamByBeamData {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ModifiedObject: ").Append(ModifiedObject).Append("\n");
            sb.Append("  CuttingObject: ").Append(CuttingObject).Append("\n");
            sb.Append("  IsWeld: ").Append(IsWeld).Append("\n");
            sb.Append("  WeldThickness: ").Append(WeldThickness).Append("\n");
            sb.Append("  WeldType: ").Append(WeldType).Append("\n");
            sb.Append("  Offset: ").Append(Offset).Append("\n");
            sb.Append("  Method: ").Append(Method).Append("\n");
            sb.Append("  Orientation: ").Append(Orientation).Append("\n");
            sb.Append("  PlaneOnCuttingObject: ").Append(PlaneOnCuttingObject).Append("\n");
            sb.Append("  CutPart: ").Append(CutPart).Append("\n");
            sb.Append("  ExtendBeforeCut: ").Append(ExtendBeforeCut).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
