/*
 * Connection Rest API 1.0
 *
 * IDEA StatiCa Connection API, used for the automated design and calculation of steel connections.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: info@ideastatica.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = IdeaStatiCa.ConnectionApi.Client.OpenAPIDateConverter;

namespace IdeaStatiCa.ConnectionApi.Model
{
    /// <summary>
    /// BaseTemplateConversion
    /// </summary>
    [DataContract(Name = "BaseTemplateConversion")]
    public partial class BaseTemplateConversion
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BaseTemplateConversion" /> class.
        /// </summary>
        /// <param name="originalValue">originalValue.</param>
        /// <param name="originalTemplateId">originalTemplateId.</param>
        /// <param name="newValue">newValue.</param>
        /// <param name="description">description.</param>
        /// <param name="newTemplateId">newTemplateId.</param>
        public BaseTemplateConversion(string originalValue = default(string), string originalTemplateId = default(string), string newValue = default(string), string description = default(string), string newTemplateId = default(string))
        {
            this.OriginalValue = originalValue;
            this.OriginalTemplateId = originalTemplateId;
            this.NewValue = newValue;
            this.Description = description;
            this.NewTemplateId = newTemplateId;
        }

        /// <summary>
        /// Gets or Sets OriginalValue
        /// </summary>
        [DataMember(Name = "originalValue", EmitDefaultValue = true)]
        public string OriginalValue { get; set; }

        /// <summary>
        /// Gets or Sets OriginalTemplateId
        /// </summary>
        [DataMember(Name = "originalTemplateId", EmitDefaultValue = true)]
        public string OriginalTemplateId { get; set; }

        /// <summary>
        /// Gets or Sets NewValue
        /// </summary>
        [DataMember(Name = "newValue", EmitDefaultValue = true)]
        public string NewValue { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets NewTemplateId
        /// </summary>
        [DataMember(Name = "newTemplateId", EmitDefaultValue = true)]
        public string NewTemplateId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BaseTemplateConversion {\n");
            sb.Append("  OriginalValue: ").Append(OriginalValue).Append("\n");
            sb.Append("  OriginalTemplateId: ").Append(OriginalTemplateId).Append("\n");
            sb.Append("  NewValue: ").Append(NewValue).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  NewTemplateId: ").Append(NewTemplateId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
