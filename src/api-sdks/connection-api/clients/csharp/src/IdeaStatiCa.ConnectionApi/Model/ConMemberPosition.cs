/*
 * Connection Rest API 1.0
 *
 * IDEA StatiCa Connection API, used for the automated design and calculation of steel connections.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: info@ideastatica.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = IdeaStatiCa.ConnectionApi.Client.OpenAPIDateConverter;

namespace IdeaStatiCa.ConnectionApi.Model
{
    /// <summary>
    /// ConMemberPosition
    /// </summary>
    [DataContract(Name = "ConMemberPosition")]
    public partial class ConMemberPosition
    {

        /// <summary>
        /// Gets or Sets DefinedBy
        /// </summary>
        [DataMember(Name = "definedBy", EmitDefaultValue = false)]
        public ConMemberPlacementDefinitionTypeEnum? DefinedBy { get; set; }

        /// <summary>
        /// Gets or Sets Align
        /// </summary>
        [DataMember(Name = "align", EmitDefaultValue = false)]
        public ConMemberAlignmentTypeEnum? Align { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ConMemberPosition" /> class.
        /// </summary>
        /// <param name="definedBy">definedBy.</param>
        /// <param name="axisX">axisX.</param>
        /// <param name="betaDirection">betaDirection.</param>
        /// <param name="gamaPitch">gamaPitch.</param>
        /// <param name="alphaRotation">alphaRotation.</param>
        /// <param name="offsetEx">offsetEx.</param>
        /// <param name="offsetEy">offsetEy.</param>
        /// <param name="offsetEz">offsetEz.</param>
        /// <param name="align">align.</param>
        /// <param name="alignedPlate">alignedPlate.</param>
        /// <param name="relatedPlate">relatedPlate.</param>
        public ConMemberPosition(ConMemberPlacementDefinitionTypeEnum? definedBy = default(ConMemberPlacementDefinitionTypeEnum?), Vector3D axisX = default(Vector3D), double? betaDirection = default(double?), double? gamaPitch = default(double?), double alphaRotation = default(double), double offsetEx = default(double), double offsetEy = default(double), double offsetEz = default(double), ConMemberAlignmentTypeEnum? align = default(ConMemberAlignmentTypeEnum?), ConAlignedPlate alignedPlate = default(ConAlignedPlate), ConAlignedPlate relatedPlate = default(ConAlignedPlate))
        {
            this.DefinedBy = definedBy;
            this.AxisX = axisX;
            this.BetaDirection = betaDirection;
            this.GamaPitch = gamaPitch;
            this.AlphaRotation = alphaRotation;
            this.OffsetEx = offsetEx;
            this.OffsetEy = offsetEy;
            this.OffsetEz = offsetEz;
            this.Align = align;
            this.AlignedPlate = alignedPlate;
            this.RelatedPlate = relatedPlate;
        }

        /// <summary>
        /// Gets or Sets AxisX
        /// </summary>
        [DataMember(Name = "axisX", EmitDefaultValue = false)]
        public Vector3D AxisX { get; set; }

        /// <summary>
        /// Gets or Sets BetaDirection
        /// </summary>
        [DataMember(Name = "betaDirection", EmitDefaultValue = true)]
        public double? BetaDirection { get; set; }

        /// <summary>
        /// Gets or Sets GamaPitch
        /// </summary>
        [DataMember(Name = "gamaPitch", EmitDefaultValue = true)]
        public double? GamaPitch { get; set; }

        /// <summary>
        /// Gets or Sets AlphaRotation
        /// </summary>
        [DataMember(Name = "alphaRotation", EmitDefaultValue = false)]
        public double AlphaRotation { get; set; }

        /// <summary>
        /// Gets or Sets OffsetEx
        /// </summary>
        [DataMember(Name = "offsetEx", EmitDefaultValue = false)]
        public double OffsetEx { get; set; }

        /// <summary>
        /// Gets or Sets OffsetEy
        /// </summary>
        [DataMember(Name = "offsetEy", EmitDefaultValue = false)]
        public double OffsetEy { get; set; }

        /// <summary>
        /// Gets or Sets OffsetEz
        /// </summary>
        [DataMember(Name = "offsetEz", EmitDefaultValue = false)]
        public double OffsetEz { get; set; }

        /// <summary>
        /// Gets or Sets AlignedPlate
        /// </summary>
        [DataMember(Name = "alignedPlate", EmitDefaultValue = false)]
        public ConAlignedPlate AlignedPlate { get; set; }

        /// <summary>
        /// Gets or Sets RelatedPlate
        /// </summary>
        [DataMember(Name = "relatedPlate", EmitDefaultValue = false)]
        public ConAlignedPlate RelatedPlate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ConMemberPosition {\n");
            sb.Append("  DefinedBy: ").Append(DefinedBy).Append("\n");
            sb.Append("  AxisX: ").Append(AxisX).Append("\n");
            sb.Append("  BetaDirection: ").Append(BetaDirection).Append("\n");
            sb.Append("  GamaPitch: ").Append(GamaPitch).Append("\n");
            sb.Append("  AlphaRotation: ").Append(AlphaRotation).Append("\n");
            sb.Append("  OffsetEx: ").Append(OffsetEx).Append("\n");
            sb.Append("  OffsetEy: ").Append(OffsetEy).Append("\n");
            sb.Append("  OffsetEz: ").Append(OffsetEz).Append("\n");
            sb.Append("  Align: ").Append(Align).Append("\n");
            sb.Append("  AlignedPlate: ").Append(AlignedPlate).Append("\n");
            sb.Append("  RelatedPlate: ").Append(RelatedPlate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
