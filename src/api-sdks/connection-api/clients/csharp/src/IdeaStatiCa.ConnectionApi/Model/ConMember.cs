/*
 * Connection Rest API 1.0
 *
 * IDEA StatiCa Connection API, used for the automated design and calculation of steel connections.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: info@ideastatica.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = IdeaStatiCa.ConnectionApi.Client.OpenAPIDateConverter;

namespace IdeaStatiCa.ConnectionApi.Model
{
    /// <summary>
    /// ConMember
    /// </summary>
    [DataContract(Name = "ConMember")]
    public partial class ConMember
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConMember" /> class.
        /// </summary>
        /// <param name="isContinuous">isContinuous.</param>
        /// <param name="crossSectionId">crossSectionId.</param>
        /// <param name="mirrorY">mirrorY.</param>
        /// <param name="mirrorZ">mirrorZ.</param>
        /// <param name="isBearing">isBearing.</param>
        /// <param name="position">position.</param>
        /// <param name="model">model.</param>
        /// <param name="id">id.</param>
        /// <param name="name">name.</param>
        /// <param name="active">active.</param>
        public ConMember(bool isContinuous = default(bool), int? crossSectionId = default(int?), bool? mirrorY = default(bool?), bool? mirrorZ = default(bool?), bool isBearing = default(bool), ConMemberPosition position = default(ConMemberPosition), ConMemberModel model = default(ConMemberModel), int id = default(int), string name = default(string), bool active = default(bool))
        {
            this.IsContinuous = isContinuous;
            this.CrossSectionId = crossSectionId;
            this.MirrorY = mirrorY;
            this.MirrorZ = mirrorZ;
            this.IsBearing = isBearing;
            this.Position = position;
            this.Model = model;
            this.Id = id;
            this.Name = name;
            this.Active = active;
        }

        /// <summary>
        /// Gets or Sets IsContinuous
        /// </summary>
        [DataMember(Name = "isContinuous", EmitDefaultValue = true)]
        public bool IsContinuous { get; set; }

        /// <summary>
        /// Gets or Sets CrossSectionId
        /// </summary>
        [DataMember(Name = "crossSectionId", EmitDefaultValue = true)]
        public int? CrossSectionId { get; set; }

        /// <summary>
        /// Gets or Sets MirrorY
        /// </summary>
        [DataMember(Name = "mirrorY", EmitDefaultValue = true)]
        public bool? MirrorY { get; set; }

        /// <summary>
        /// Gets or Sets MirrorZ
        /// </summary>
        [DataMember(Name = "mirrorZ", EmitDefaultValue = true)]
        public bool? MirrorZ { get; set; }

        /// <summary>
        /// Gets or Sets IsBearing
        /// </summary>
        [DataMember(Name = "isBearing", EmitDefaultValue = true)]
        public bool IsBearing { get; set; }

        /// <summary>
        /// Gets or Sets Position
        /// </summary>
        [DataMember(Name = "position", EmitDefaultValue = false)]
        public ConMemberPosition Position { get; set; }

        /// <summary>
        /// Gets or Sets Model
        /// </summary>
        [DataMember(Name = "model", EmitDefaultValue = false)]
        public ConMemberModel Model { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [DataMember(Name = "active", EmitDefaultValue = true)]
        public bool Active { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ConMember {\n");
            sb.Append("  IsContinuous: ").Append(IsContinuous).Append("\n");
            sb.Append("  CrossSectionId: ").Append(CrossSectionId).Append("\n");
            sb.Append("  MirrorY: ").Append(MirrorY).Append("\n");
            sb.Append("  MirrorZ: ").Append(MirrorZ).Append("\n");
            sb.Append("  IsBearing: ").Append(IsBearing).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  Model: ").Append(Model).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
