/*
 * Connection Rest API 1.0
 *
 * IDEA StatiCa Connection API, used for the automated design and calculation of steel connections.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: info@ideastatica.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = IdeaStatiCa.ConnectionApi.Client.OpenAPIDateConverter;

namespace IdeaStatiCa.ConnectionApi.Model
{
    /// <summary>
    /// TemplateConversions
    /// </summary>
    [DataContract(Name = "TemplateConversions")]
    public partial class TemplateConversions
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TemplateConversions" /> class.
        /// </summary>
        /// <param name="conversions">conversions.</param>
        /// <param name="countryCode">countryCode.</param>
        public TemplateConversions(List<BaseTemplateConversion> conversions = default(List<BaseTemplateConversion>), string countryCode = default(string))
        {
            this.Conversions = conversions;
            this.CountryCode = countryCode;
        }

        /// <summary>
        /// Gets or Sets Conversions
        /// </summary>
        [DataMember(Name = "conversions", EmitDefaultValue = true)]
        public List<BaseTemplateConversion> Conversions { get; set; }

        /// <summary>
        /// Gets or Sets CountryCode
        /// </summary>
        [DataMember(Name = "countryCode", EmitDefaultValue = true)]
        public string CountryCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TemplateConversions {\n");
            sb.Append("  Conversions: ").Append(Conversions).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
